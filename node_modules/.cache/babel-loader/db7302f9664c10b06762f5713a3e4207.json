{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, log, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const {\n        blockExplorer,\n        displayName\n      } = this.chainConfig;\n      network = {\n        chainId: 1,\n        host: \"mainnet\",\n        blockExplorer,\n        networkName: displayName\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget\n      } = this.chainConfig;\n      network = {\n        chainId: parseInt(chainId, 16),\n        host: rpcTarget,\n        blockExplorer,\n        networkName: displayName\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        throw WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(chainId));\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { TorusWalletAdapter };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCM,MAAOA,kBAAP,SAAkCC,WAAlC,CAAoD;AAqBxDC,gBAA2C;AAA/BC,cAA+B,uEAAF,EAA7BA;AACV;;AArBsBC,iDAAe,CAACC,SAAhBD;;AAE0BE,gEAAkB,CAACC,MAAnBD;;AAEGE,mEAAgB,CAACD,MAAjBC;;AAEdC,kDAAgB,CAACC,QAAjBD;;AAEFE,kDAAc,CAACC,SAAfD;;AAYME,2CAVN,IAUM;;AAAAA;;AAAAA;;AAAAA,2CAJL,EAIK;;AAAAA,wCAFtB,KAEsB;;AAEzC,SAAKC,kBAAL,GAA0BX,MAAM,CAACY,eAAPZ,IAA0B,EAApD;AACA,SAAKa,UAAL,GAAkBb,MAAM,CAACa,UAAPb,IAAqB,EAAvC;AACA,SAAKc,aAAL,GAAqBd,MAAM,CAACc,aAAPd,IAAwB,EAA7C;AACA,SAAKe,WAAL,GAAmBf,MAAM,CAACe,WAAPf,IAAsB,IAAzC;AACD;;AAEW,MAARgB,QAAQ;AACN,aAAKC,MAAL,KAAgBT,cAAc,CAACU,SAA/B,IAA4C,KAAKC,aAAjD,EAAgE;AAC3D,kBAAKA,aAAL,CAAmBH,QAAnB;AACR;;AACD,WAAO,IAAP;AACD;;AAEW,MAARA,QAAQ,CAACI,CAAD,EAAmC;AAC7C,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAES,QAAJC,IAAI,CAACC,OAAD,EAA4B;AAC9BC,4CAD8B;;AAGpC,QAAIC,OAAJ;;AACI,SAAC,KAAKV,WAAN,EAAmB;AAChBA,yBAAcW,cAAc,CAACrB,gBAAgB,CAACD,MAAlB,EAA0B,CAA1B,CAA5BW;AACC;AAAEY,qBAAF;AAAiBC;AAAjB,UAAiC,KAAKb,WAAtC;AACNU,aAAO,GAAG;AAAEI,eAAO,EAAE,CAAX;AAAcC,YAAI,EAAE,SAApB;AAA+BH,qBAA/B;AAA8CI,mBAAW,EAAEH;AAA3D,OAAVH;AAHF,KAAI,MAIG;AACC;AAAEI,eAAF;AAAWF,qBAAX;AAA0BC,mBAA1B;AAAuCI;AAAvC,UAAqD,KAAKjB,WAA1D;AACNU,aAAO,GAAG;AAAEI,eAAO,EAAEI,QAAQ,CAACJ,OAAD,EAAoB,EAApB,CAAnB;AAA4CC,YAAI,EAAEE,SAAlD;AAA6DL,qBAA7D;AAA4EI,mBAAW,EAAEH;AAAzF,OAAVH;AACD;;AACD,SAAKN,aAAL,GAAqB,IAAIe,KAAJ,CAAU,KAAKvB,kBAAf,CAArB;AACM,eAAKQ,aAAL,CAAmBG,IAAnB;AACJa,qBAAe,EAAE;AADb,OAED,KAAKtB,UAFJ;AAGJY;AAHI;AAKN,SAAKR,MAAL,GAAcT,cAAc,CAAC4B,KAA7B;AACKC,cAAKC,cAAc,CAACF,KAApBC,EAA2BpC,eAAe,CAACC,SAA3CmC;;AAED;AACEd,iBAAO,CAACgB,WAARhB,EAAqB;AAClBiB,0BAAa,IAAbA;AACC,mBAAKC,OAAL;AACP;AAJH,KAAI,CAKF,OAAOC,KAAP,EAAc;AACdC,SAAG,CAACD,KAAJC,CAAU,2CAAVA,EAAuDD,KAAvDC;AACA,WAAKN,IAAL,CAAUC,cAAc,CAACM,OAAzB,EAAkCF,KAAlC;AACD;AACF;;AAEY,QAAPD,OAAO;AACX,UAAMI,2BAAN;AACI,SAAC,KAAK1B,aAAN,EAAqB,MAAM2B,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAN;AACzB,SAAK7B,MAAL,GAAcT,cAAc,CAACwC,UAA7B;AACA,SAAKX,IAAL,CAAUC,cAAc,CAACU,UAAzB,EAAqC;AAAEC,aAAO,EAAEhD,eAAe,CAACC;AAA3B,KAArC;;AACI;AACF,YAAM,KAAKiB,aAAL,CAAmB+B,KAAnB,CAAyB,KAAKpC,aAA9B,CAAN;AACM;AAAEe;AAAF,UAAc,KAAKV,aAAL,CAAmBH,QAAjC;;AACN,UAAIa,OAAO,IAAII,QAAQ,CAACJ,OAAD,CAARI,KAAsBA,QAAQ,CAAE,KAAKlB,WAAL,CAAuCc,OAAzC,EAAkD,EAAlD,CAA7C,EAAoG;AAClG,cAAMiB,yBAAyB,CAACK,QAA1BL,CACJ,IADIA,wDAE4C,KAAK/B,WAAL,CAAuCc,OAFnF,EAEwGA,aAFxG,EAEwGA,MAFxG,CAEwGA,OAFxG,EAAN;AAID;;AACD,WAAKZ,MAAL,GAAcT,cAAc,CAACU,SAA7B;AACKC,yBAAcgB,eAAdhB;AACL,WAAKkB,IAAL,CAAU7B,cAAc,CAACU,SAAzB,EAAoC;AAAE+B,eAAO,EAAEhD,eAAe,CAACC,SAA3B;AAAsCkD,mBAAW,EAAE,KAAKZ;AAAxD,OAApC;AACA,aAAO,KAAKxB,QAAZ;AAZF,KAAI,CAaF,OAAO0B,KAAP,EAAc;AACd;AACA,WAAKzB,MAAL,GAAcT,cAAc,CAAC4B,KAA7B;AACKI,wBAAa,KAAbA;AACL,WAAKH,IAAL,CAAU7B,cAAc,CAACoC,OAAzB,EAAkCF,KAAlC;AACMA,iBAAK,YAAYW,aAAjBX,GAAiCA,KAAjCA,GAAyCY,gBAAgB,CAACC,eAAjBD,CAAiC,mCAAjCA,CAAzCZ;AACP;AACF;;AAEe,QAAVc,UAAU,GAAmD;AAAA,QAAlDjC,OAAkD,GAAlBkC;AAAEC,aAAO,EAAE;AAAX,KAAkB;AACjE,QAAI,KAAKzC,MAAL,KAAgBT,cAAc,CAACU,SAAnC,EAA8C,MAAMoC,gBAAgB,CAACK,iBAAjBL,CAAmC,2BAAnCA,CAAN;AAC1C,SAAC,KAAKnC,aAAN,EAAqB,MAAM2B,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAN;AACzB,UAAM,KAAK3B,aAAL,CAAmByC,MAAnB,EAAN;AACKzC,uBAAc0C,eAAd1C;;AACDI,eAAO,CAACmC,OAARnC,EAAiB;AACnB,WAAKN,MAAL,GAAcT,cAAc,CAACC,SAA7B;AACKU,2BAAgB,IAAhBA;AAFP,KAAII,MAGG;AACL;AACA,WAAKN,MAAL,GAAcT,cAAc,CAAC4B,KAA7B;AACD;;AAEII,sBAAa,KAAbA;AACL,SAAKH,IAAL,CAAUC,cAAc,CAACwB,YAAzB;AACD;;AAEgB,QAAXC,WAAW;AACf,QAAI,KAAK9C,MAAL,KAAgBT,cAAc,CAACU,SAAnC,EAA8C,MAAMoC,gBAAgB,CAACK,iBAAjBL,CAAmC,2BAAnCA,CAAN;AAC1C,SAAC,KAAKnC,aAAN,EAAqB,MAAM2B,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAN;AACnBkB,kBAAQ,GAAG,MAAM,KAAK7C,aAAL,CAAmB4C,WAAnB,CAA+B,EAA/B,CAAjBC;AACN,WAAOA,QAAP;AACD;;AAEDC,oBAAkB,CAAC7C,CAAD,EAAW,CAAU;;AA3HiB","names":["TorusWalletAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","TORUS_EVM","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","_defineProperty","torusWalletOptions","adapterSettings","initParams","loginSettings","chainConfig","provider","status","CONNECTED","torusInstance","_","Error","init","options","checkInitializationRequirements","network","getChainConfig","blockExplorer","displayName","chainId","host","networkName","rpcTarget","parseInt","Torus","showTorusButton","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","log","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","fromCode","reconnected","Web3AuthError","WalletLoginError","connectionError","disconnect","arguments","cleanup","notConnectedError","logout","hideTorusButton","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings"],"sources":["../src/torusWalletAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}