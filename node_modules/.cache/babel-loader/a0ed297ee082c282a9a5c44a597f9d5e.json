{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, log, WalletLoginError, isHexStrict, WalletInitializationError, getChainConfig } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { personalSign, signTypedData, SignTypedDataVersion, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { privateToAddress, stripHexPrefix, addHexPrefix } from 'ethereumjs-util';\nimport Common, { Hardfork } from '@ethereumjs/common';\nimport BigNumber, { BigNumber as BigNumber$1 } from 'bignumber.js';\nimport { get } from '@toruslabs/http-helpers';\n\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n\n    throw ethErrors.rpc.invalidParams({\n      message: \"Invalid parameters: must provide an Ethereum address.\"\n    });\n  } //\n  // account lookups\n  //\n\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  } //\n  // transaction signatures\n  //\n\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  } //\n  // message signatures\n  //\n\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$4(_objectSpread$4({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$4(_objectSpread$4({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    } // process normally\n\n\n    const firstParam = req.params[0];\n    const secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n\n    let address, message;\n\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = \"The eth_personalSign method requires params ordered \";\n      warning += \"[message, address]. This was previously handled incorrectly, \";\n      warning += \"and has been corrected automatically. \";\n      warning += \"Please switch this param order for smooth behavior in the future.\";\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams = _objectSpread$4(_objectSpread$4({}, extraParams), {}, {\n      from: address,\n      data: message\n    }); // eslint-disable-next-line require-atomic-updates\n\n\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$4(_objectSpread$4({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\n\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n\n  async function addNewChain(req, res) {\n    var _req$params;\n\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n\n  async function updateChain(req, res) {\n    var _req$params2;\n\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\n\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n\n  async function updateAccount(req, res) {\n    var _req$params3;\n\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processTypedMessageV4: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: _objectSpread$3(_objectSpread$3({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId,\n      lookup = true\n    } = _ref2;\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    const {\n      rpcTarget,\n      displayName\n    } = currentChainConfig;\n    this.update({\n      chainId: \"loading\"\n    });\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId,\n          chainName: displayName,\n          rpcUrls: [rpcTarget]\n        }]\n      });\n    } catch (error) {\n      log.error(error);\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId\n        }]\n      });\n    } catch (error) {\n      log.error(error); // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$1({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(connector);\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload.params[0]; // Check if accounts changed and trigger event\n\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        }); // await this.setupEngine(connector);\n\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n\n      const connectedHexChainId = \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {}; // Handle rpcUrl update\n\n        this.configure({\n          chainConfig: _objectSpread$3(_objectSpread$3({}, maybeConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl,\n            chainNamespace: CHAIN_NAMESPACES.EIP155\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nasync function signTx(txParams, privKey, txFormatter) {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nfunction getProviderHandlers(_ref) {\n  let {\n    txFormatter,\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return \"0x\".concat(signedTx.toString(\"hex\"));\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\"); // Setter Maps\n\nconst toBigNumber = {\n  hex: n => typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16),\n  dec: n => new BigNumber(n, 10)\n};\nconst toNormalizedDenomination = {\n  WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n  WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP)\n};\nconst baseChange = {\n  hex: n => n.toString(16),\n  dec: n => new BigNumber(n).toString(10)\n};\n\nconst converter = params => {\n  const {\n    value,\n    fromNumericBase,\n    fromDenomination,\n    toNumericBase,\n    toDenomination,\n    numberOfDecimals\n  } = params;\n  let convertedValue = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n\n  return convertedValue;\n};\n\nconst conversionUtil = (value, _ref) => {\n  let {\n    fromNumericBase = \"hex\",\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals\n  } = _ref;\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\"\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\n\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n\n  return new BigNumber$1(a, 10).lt(b, 10);\n}\n\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nfunction hexToBn(inputHex) {\n  if (BigNumber$1.isBigNumber(inputHex)) return inputHex;\n  return new BigNumber$1(stripHexPrefix(inputHex), 16);\n}\n\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numberBN = new BigNumber$1(numerator);\n  const denomBN = new BigNumber$1(denominator);\n  return targetBN.multipliedBy(numberBN).dividedBy(denomBN);\n}\n\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction normalizeGWEIDecimalNumbers(n) {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nasync function fetchEip1159GasEstimates(url) {\n  const estimates = await get(url);\n\n  const normalizedEstimates = _objectSpread$2(_objectSpread$2({}, estimates), {}, {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: _objectSpread$2(_objectSpread$2({}, estimates.low), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n    }),\n    medium: _objectSpread$2(_objectSpread$2({}, estimates.medium), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n    }),\n    high: _objectSpread$2(_objectSpread$2({}, estimates.high), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n    })\n  });\n\n  return normalizedEstimates;\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\n\n\nasync function fetchLegacyGasPriceEstimates(url) {\n  const result = await get(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\"\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TransactionFormatter {\n  constructor(_ref) {\n    let {\n      getProviderEngineProxy\n    } = _ref;\n\n    _defineProperty(this, \"chainConfig\", null);\n\n    _defineProperty(this, \"getProviderEngineProxy\", void 0);\n\n    _defineProperty(this, \"isEIP1559Compatible\", false);\n\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init() {\n    this.chainConfig = await this.providerProxy.request({\n      method: \"eth_provider_config\",\n      params: []\n    });\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const {\n      displayName: name,\n      chainId\n    } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams) {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = _objectSpread$1({}, txParams);\n\n    if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n      method: \"eth_getTransactionCount\",\n      params: [txParams.from, \"latest\"]\n    });\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      } // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    } // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n\n\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  async fetchEthGasPriceEstimate() {\n    const gasPrice = await this.providerProxy.request({\n      method: \"eth_gasPrice\",\n      params: []\n    });\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n    };\n  }\n\n  async getEIP1559Compatibility() {\n    const latestBlock = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    return !!supportsEIP1559;\n  }\n\n  async fetchGasFeeEstimateData() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n    let gasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", \"\".concat(chainId)));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n        };\n      } catch (error) {\n        throw new Error(\"Gas fee/price estimation failed. Message: \".concat(error.message));\n      }\n    }\n\n    return gasData;\n  }\n\n  async getDefaultGasFees(txParams) {\n    if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n      return {};\n    }\n\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType\n      } = await this.fetchGasFeeEstimateData();\n\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const {\n          medium: {\n            suggestedMaxPriorityFeePerGas,\n            suggestedMaxFeePerGas\n          } = {}\n        } = gasFeeEstimates;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: decGWEIToHexWEI(gasFeeEstimates.medium)\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const {\n      gasPrice\n    } = await this.fetchEthGasPriceEstimate();\n    return {\n      gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice))\n    };\n  }\n\n  async estimateTxGas(txMeta) {\n    const txParams = _objectSpread$1({}, txMeta); // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n\n\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = await this.providerProxy.request({\n      method: \"eth_estimateGas\",\n      params: [txParams]\n    });\n    return gas;\n  }\n\n  async analyzeGasUsage(txMeta) {\n    const block = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    }); // fallback to block gasLimit\n\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n    }\n\n    return {\n      blockGasLimit: block.gasLimit,\n      estimatedGasHex\n    };\n  }\n\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n    let multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.multipliedBy(0.9).dp(0, 1);\n    const bufferedGasLimitBn = initialGasLimitBn.multipliedBy(multiplier).dp(0, 1); // if initialGasLimit is above blockGasLimit, dont modify it\n\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn); // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn); // otherwise use blockGasLimit\n\n    return bnToHex(upperGasLimitBn);\n  }\n\n  async determineTransactionCategory(txParameters) {\n    const {\n      data,\n      to\n    } = txParameters;\n    let code = \"\";\n    let txCategory;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = await this.providerProxy.request({\n          method: \"eth_getCode\",\n          params: [to, \"latest\"]\n        });\n      } catch (error) {\n        log.warn(error);\n      }\n\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return {\n      transactionCategory: txCategory,\n      code\n    };\n  }\n\n  async getDefaultGasLimit(txParams) {\n    const {\n      transactionCategory\n    } = await this.determineTransactionCategory(_objectSpread$1({}, txParams));\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21000; // This is a standard ether simple send, gas requirement is exactly 21k\n\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const {\n      blockGasLimit,\n      estimatedGasHex\n    } = await this.analyzeGasUsage(txParams); // add additional gas buffer to our estimation for safety\n\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit);\n    return gasLimit;\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n\n      this._providerEngineProxy.emit(\"connect\", {\n        chainId\n      });\n    }\n\n    this.update({\n      chainId\n    });\n    return network;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, WalletConnectProvider };","map":{"version":3,"mappings":"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","names":["resemblesAddress","str","length","createWalletMiddleware","_ref","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","ethErrors","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","_ref2","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","connector","_","signMessage","signPersonalMessage","WalletConnectProvider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","_defineProperty","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","getChainConfig","displayName","update","sendCustomRequest","chainName","error","log","configure","lookupNetwork","connected","WalletLoginError","notConnectedError","connectedHexChainId","isHexStrict","toString","WalletInitializationError","rpcConnectionError","emit","getProviderHandlers","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","TransactionFactory","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","privateToAddress","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","debug","SignTypedDataVersion","V1","V3","V4","info","getEncryptionPublicKey","stripped","stripHexPrefix","buff","decrypted","decrypt","encryptedData","JSON","parse","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","a","b","lt","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","isBigNumber","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","multipliedBy","dividedBy","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","get","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","name","hardfork","Hardfork","London","Berlin","customChainParams","Number","parseInt","networkId","defaultHardfork","Common","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","bnLessThan","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","existingKey","network","chainDisconnected","chainSwitchHandlers","blockExplorerUrls","ticker","symbol","tickerName","blockExplorer","accountHandlers","createAccountMiddleware"],"sources":["../src/rpc/walletMidddleware.ts","../src/rpc/ethRpcMiddlewares.ts","../src/rpc/jrpcClient.ts","../src/providers/injectedProviders/walletConnectUtils.ts","../src/providers/injectedProviders/WalletConnectProvider.ts","../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../src/providers/converter.ts","../src/providers/utils.ts","../src/providers/privateKeyProviders/TransactionFormatter/constants.ts","../src/providers/privateKeyProviders/TransactionFormatter/utils.ts","../src/providers/privateKeyProviders/TransactionFormatter/index.ts","../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null]},"metadata":{},"sourceType":"module"}