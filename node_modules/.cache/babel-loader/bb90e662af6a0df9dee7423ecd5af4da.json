{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport WalletConnect from '@walletconnect/client';\nimport { CHAIN_NAMESPACES, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, log, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { WalletConnectProvider } from '@web3auth/ethereum-provider';\nconst WALLET_CONNECT_EXTENSION_ADAPTERS = [{\n  name: \"Rainbow\",\n  chains: [CHAIN_NAMESPACES.EIP155],\n  logo: \"https://images.web3auth.io/login-rainbow.svg\",\n  mobile: {\n    native: \"rainbow:\",\n    universal: \"https://rnbwapp.com\"\n  },\n  desktop: {\n    native: \"\",\n    universal: \"\"\n  }\n}];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass WalletConnectV1Adapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.WALLET_CONNECT_V1);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"adapterOptions\", void 0);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"adapterData\", {\n      uri: \"\",\n      extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    _defineProperty(this, \"wcProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.adapterOptions = _objectSpread({}, options);\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get connected() {\n    var _this$connector;\n\n    return !!((_this$connector = this.connector) !== null && _this$connector !== void 0 && _this$connector.connected);\n  }\n\n  get provider() {\n    var _this$wcProvider;\n\n    return ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init() {\n    super.checkInitializationRequirements();\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    } // Create a connector\n\n\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({\n      config: {\n        chainConfig: this.chainConfig\n      },\n      connector: this.connector\n    });\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({\n        accounts: this.connector.accounts,\n        chainId: this.connector.chainId\n      });\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({\n        accounts: this.connector.accounts,\n        chainId: this.connector.chainId\n      });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      var _this$adapterOptions$; // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n\n\n      if ((_this$adapterOptions$ = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$ !== void 0 && _this$adapterOptions$.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n      }\n\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\")); // for wallet connect default modal.\n\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error, payload) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error); // ready again to be connected\n\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with wallet connect: \".concat((error === null || error === void 0 ? void 0 : error.message) || \"\")));\n      }\n    });\n  }\n\n  async getUserInfo() {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    const {\n      cleanup\n    } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await this.connector.killSession();\n    this.rehydrated = false;\n\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async createNewSession() {\n    var _this$adapterOptions, _this$adapterOptions$2;\n\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      forceNewSession: false\n    };\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    } // for wallet connect qr modal\n\n\n    if ((_this$adapterOptions = this.adapterOptions) !== null && _this$adapterOptions !== void 0 && (_this$adapterOptions$2 = _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 && _this$adapterOptions$2.qrcodeModal) {\n      var _this$chainConfig;\n\n      await this.connector.createSession({\n        chainId: parseInt(((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainId) || \"0x1\", 16)\n      });\n      return;\n    } // for web3auth qr code modal\n\n\n    return new Promise((resolve, reject) => {\n      var _this$chainConfig2;\n\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        var _this$connector2;\n\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n\n        const uri = payload.params[0];\n        this.updateAdapterData({\n          uri,\n          extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS\n        });\n        (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.off(\"display_uri\");\n        return resolve();\n      });\n      this.connector.createSession({\n        chainId: parseInt(((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId) || \"0x1\", 16)\n      }).catch(error => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  async onConnectHandler(params) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n    const {\n      chainId\n    } = params;\n    log.debug(\"connected chainId in hex\", chainId);\n\n    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {\n      try {\n        await this.wcProvider.switchChain({\n          chainId: this.chainConfig.chainId,\n          lookup: false\n        });\n      } catch (error) {\n        log.error(error); // we need to create a new session since old session is already used and\n        // user needs to login again with correct chain with new qr code.\n\n        await this.createNewSession({\n          forceNewSession: true\n        });\n        const connectedChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, chainId);\n        this.emit(ADAPTER_EVENTS.ERRORED, WalletInitializationError.fromCode(5000, \"Not connected to correct network. Expected: \".concat(this.chainConfig.displayName, \", Current: \").concat((connectedChainConfig === null || connectedChainConfig === void 0 ? void 0 : connectedChainConfig.displayName) || chainId, \", Please switch to correct network from wallet\")));\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        return;\n      }\n    }\n\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1,\n      reconnected: this.rehydrated\n    });\n  }\n\n  subscribeEvents(connector) {\n    connector.on(\"session_update\", async error => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  getWalletConnectInstance() {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\"; // Create a connector\n\n    return new WalletConnect(walletConnectOptions);\n  }\n\n}\n\nexport { WalletConnectV1Adapter };","map":{"version":3,"mappings":";;;;AAEO,MAAMA,iCAAiC,GAAqC,CACjF;AACEC,MAAI,EAAE,SADR;AAEEC,QAAM,EAAE,CAACC,gBAAgB,CAACC,MAAlB,CAFV;AAGEC,MAAI,EAAE,8CAHR;AAIEC,QAAM,EAAE;AACNC,UAAM,EAAE,UADF;AAENC,aAAS,EAAE;AAFL,GAJV;AAQEC,SAAO,EAAE;AACPF,UAAM,EAAE,EADD;AAEPC,aAAS,EAAE;AAFJ;AARX,CADiF,CAA5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2BP,MAAME,sBAAN,SAAqCC,WAArC,CAAsD;AAwBpDC,gBAAuD;AAA3CC,eAA2C,uEAAF,EAAzCA;AACV;;AAxBsBC,iDAAe,CAACC,iBAAhBD;;AAE0BE,gEAAkB,CAACZ,MAAnBY;;AAEGb,mEAAgB,CAACC,MAAjBD;;AAEdc,kDAAgB,CAACC,QAAjBD;;AAiBgBE;;AAblBC,kDAAc,CAACC,SAAfD;;AAEKD;AACxCG,SAAG,EAAE,EADmC;AAExCC,uBAAiB,EAAEvB;AAFqB;;AAWamB,uCANd,IAMc;;AAAAA,wCAJJ,IAII;;AAAAA,wCAFlC,KAEkC;;AAEhDK,0BAALC,kBAA2BZ,OAA3B,CAAKW;AACL,SAAKE,WAAL,GAAmBb,OAAO,CAACa,WAARb,IAAuB,IAA1C;AACD;;AAEY,MAATc,SAAS;AAAA;;AACX,WAAO,CAAC,EAAC,wBAAKC,SAAL,4DAAgBD,SAAjB,CAAR;AACD;;AAEW,MAARE,QAAQ;AAAA;;AACV,WAAO,CAAKC,yCAAYD,IAAZC,IAAYD,2BAAZC,GAAYD,MAAZC,GAAYD,yBAAjB,KAA6B,IAApC;AACD;;AAEW,MAARA,QAAQ,CAACE,CAAD,EAAmC;AAC7C,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAES,QAAJC,IAAI;AACR,UAAMC,+BAAN;;AACI,SAAC,KAAKR,WAAN,EAAmB;AAChBA,yBAAcS,cAAc,CAAChC,gBAAgB,CAACC,MAAlB,EAA0B,CAA1B,CAA5BsB;AAHC;;;AAMR,SAAKE,SAAL,GAAiB,KAAKQ,wBAAL,EAAjB;AACA,SAAKN,UAAL,GAAkB,IAAIO,qBAAJ,CAA0B;AAAEC,YAAM,EAAE;AAAEZ,mBAAW,EAAE,KAAKA;AAApB,OAAV;AAAkEE,eAAS,EAAE,KAAKA;AAAlF,KAA1B,CAAlB;AAEKW,cAAKC,cAAc,CAACC,KAApBF,EAA2BzB,eAAe,CAACC,iBAA3CwB;AACL,SAAKG,MAAL,GAActB,cAAc,CAACqB,KAA7B;;AACA,QAAI,KAAKb,SAAL,CAAeD,SAAnB,EAA8B;AACvBgB,wBAAa,IAAbA;AACC,iBAAKC,gBAAL,CAAsB;AAAEC,gBAAQ,EAAE,KAAKjB,SAAL,CAAeiB,QAA3B;AAAqCC,eAAO,EAAE,KAAKlB,SAAL,CAAekB;AAA7D,OAAtB;AACP;AACF;;AAEY,QAAPC,OAAO;AACX,UAAMC,2BAAN;AACI,SAAC,KAAKpB,SAAN,EAAiB,MAAMqB,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAN;;AAEjB,aAAKtB,SAAL,EAAgB;AACZ,iBAAKiB,gBAAL,CAAsB;AAAEC,gBAAQ,EAAE,KAAKjB,SAAL,CAAeiB,QAA3B;AAAqCC,eAAO,EAAE,KAAKlB,SAAL,CAAekB;AAA7D,OAAtB;AACN,aAAO,KAAKjB,QAAZ;AACD;;AAED,QAAI,KAAKa,MAAL,KAAgBtB,cAAc,CAAC+B,UAAnC,EAA+C;AAAA,iCAC7C;AACA;;;AACA,mCAAI,KAAK3B,cAAL,CAAoB4B,eAAxB,MAAI,IAAJ,IAAIC,gCAAJ,IAAIA,sBAAqCC,WAAzC,EAAsD;AACpD,aAAK1B,SAAL,GAAiB,KAAKQ,wBAAL,EAAjB;AACD;;AACK,iBAAKmB,gBAAL;AACN,WAAKb,MAAL,GAActB,cAAc,CAAC+B,UAA7B;AACA,WAAKZ,IAAL,CAAUC,cAAc,CAACW,UAAzB,EAAqC;AAAEK,eAAO,EAAE1C,eAAe,CAACC;AAA3B,OAArC;AACD;;AACD,WAAO,IAAI0C,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,UAAI,CAAC,KAAK/B,SAAV,EAAqB,OAAO+B,MAAM,CAACV,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAD,CAAb,CADgB;;AAGrC,WAAKrB,SAAL,CAAegC,EAAf,CAAkB,cAAlB,EAAkC,YAAW;AAC3C,aAAKlB,MAAL,GAActB,cAAc,CAACqB,KAA7B;AACKF,kBAAKC,cAAc,CAACC,KAApBF,EAA2BzB,eAAe,CAACC,iBAA3CwB;AACL,eAAOoB,MAAM,CAAC,IAAI3B,KAAJ,CAAU,mBAAV,CAAD,CAAb;AAHF;;AAKI;AACF;AACKJ,uBAAUgC,EAAVhC,CAAa,SAAbA,EAAwB,OAAOiC,KAAP,EAA4BC,OAA5B,KAA8F;AACzH,cAAID,KAAJ,EAAW;AACT,iBAAKtB,IAAL,CAAUC,cAAc,CAACuB,OAAzB,EAAkCF,KAAlC;AACD;;AACK,qBAAKjB,gBAAL,CAAsBkB,OAAO,CAACE,MAARF,CAAe,CAAfA,CAAtB;AACN,iBAAOJ,OAAO,CAAC,KAAK7B,QAAN,CAAd;AALF,SAAKD;AAFP,OAAI,CASF,OAAOiC,KAAP,EAAuB;AACvBI,WAAG,CAACJ,KAAJI,CAAU,kDAAVA,EAA8DJ,KAA9DI,EADuB;;AAGvB,aAAKvB,MAAL,GAActB,cAAc,CAACqB,KAA7B;AACKE,0BAAa,IAAbA;AACL,aAAKJ,IAAL,CAAUC,cAAc,CAACuB,OAAzB,EAAkCF,KAAlC;AACAF,cAAM,CACJE,KAAK,YAAYK,aAAjBL,GACIA,KADJA,GAEIM,gBAAgB,CAACC,eAAjBD,gDAA0E,MAAe,SAAfN,SAAe,KAAf,uBAAe,CAAEQ,OAAjB,KAA4B,EAAtG,EAHA,CAANV;AAKD;AA5BI,MAAP;AA8BD;;AAEgB,QAAXW,WAAW;AACX,SAAC,KAAK3C,SAAN,EAAiB,MAAMwC,gBAAgB,CAACI,iBAAjBJ,CAAmC,uDAAnCA,CAAN;AACrB,WAAO,EAAP;AACD;;AAEe,QAAVK,UAAU,GAAmD;AAAA,QAAlD3D,OAAkD,GAAlB4D;AAAEC,aAAO,EAAE;AAAX,KAAkB;AAC3D;AAAEA;AAAF,QAAc7D,OAAd;AACN,QAAI,CAAC,KAAKe,SAAN,IAAmB,CAAC,KAAKD,SAA7B,EAAwC,MAAMwC,gBAAgB,CAACI,iBAAjBJ,CAAmC,2BAAnCA,CAAN;AACxC,UAAM,KAAKvC,SAAL,CAAe+C,WAAf,EAAN;AACKhC,sBAAa,KAAbA;;AACL,QAAI+B,OAAJ,EAAa;AACN9C,uBAAY,IAAZA;AACL,WAAKc,MAAL,GAActB,cAAc,CAACC,SAA7B;AACKS,wBAAa,IAAbA;AAHP,WAIO;AACL;AACA,WAAKY,MAAL,GAActB,cAAc,CAACqB,KAA7B;AACD;;AACD,SAAKF,IAAL,CAAUC,cAAc,CAACoC,YAAzB;AACD;;AAE6B,QAAhBrB,gBAAgB,GAAgE;AAAA;;AAAA,QAA/DsB,IAA+D,GAA1BJ;AAAEK,qBAAe,EAAE;AAAnB,KAA0B;AACxF,SAAC,KAAKlD,SAAN,EAAiB,MAAMqB,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAN;;AACjB4B,YAAI,CAACC,eAALD,IAAwB,KAAKjD,SAAL,CAAemD,OAAvCF,EAAgD;AAClD,YAAM,KAAKjD,SAAL,CAAe+C,WAAf,EAAN;AAH0F;;;AAMxF,qCAAKnD,cAAL,gGAAqB4B,eAArB,0EAAsCE,WAAtC,EAAmD;AAAA;;AACrD,YAAM,KAAK1B,SAAL,CAAeoD,aAAf,CAA6B;AAAElC,eAAO,EAAEmC,QAAQ,CAAC,2BAAKvD,WAAL,wEAAkBoB,OAAlB,KAA6B,KAA9B,EAAqC,EAArC;AAAnB,OAA7B,CAAN;AACA;AAR0F;;;AAY5F,WAAO,IAAIW,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAoB;AAAA;;AAC3C,UAAI,CAAC,KAAK/B,SAAV,EAAqB,OAAO+B,MAAM,CAACV,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAD,CAAb;AACrBgB,SAAG,CAACiB,KAAJjB,CAAU,kDAAVA;AACKrC,qBAAUgC,EAAVhC,CAAa,aAAbA,EAA4B,OAAOuD,GAAP,EAAYrB,OAAZ,KAAuB;AAAA;;AACtD,YAAIqB,GAAJ,EAAS;AACF5C,oBAAKC,cAAc,CAACuB,OAApBxB,EAA6B4B,gBAAgB,CAACC,eAAjBD,CAAiC,0CAAjCA,CAA7B5B;AACEoB,uBAAM,CAACwB,GAAD,CAANxB;AACR;;AACD,cAAMrC,GAAG,GAAGwC,OAAO,CAACE,MAARF,CAAe,CAAfA,CAAZ;AACA,aAAKsB,iBAAL,CAAuB;AAAE9D,aAAF;AAAOC,2BAAiB,EAAEvB;AAA1B,SAAvB;AAEA,iCAAK4B,SAAL,sEAAgByD,GAAhB,CAAoB,aAApB;AACA,eAAO3B,OAAO,EAAd;AATF,OAAK9B;AAYAA,qBAAUoD,aAAVpD,CAAwB;AAAEkB,eAAO,EAAEmC,QAAQ,CAAC,4BAAKvD,WAAL,0EAAkBoB,OAAlB,KAA6B,KAA9B,EAAqC,EAArC;AAAnB,OAAxBlB,EAAuF0D,KAAvF1D,CAA8FiC,KAAD,IAAU;AAC1GI,WAAG,CAACJ,KAAJI,CAAU,iDAAVA,EAA6DJ,KAA7DI;AACA,aAAK1B,IAAL,CAAUC,cAAc,CAACuB,OAAzB,EAAkCF,KAAlC;AACOF,qBAAM,CAACE,KAAD,CAANF;AAHT,OAAK/B;AAfA,MAAP;AAqBD;;AAE6B,QAAhBgB,gBAAgB,CAACoB,MAAD,EAAgD;AAC5E,QAAI,CAAC,KAAKpC,SAAN,IAAmB,CAAC,KAAKE,UAA7B,EAAyC,MAAMmB,yBAAyB,CAACC,QAA1BD,CAAmC,iCAAnCA,CAAN;AACrC,SAAC,KAAKvB,WAAN,EAAmB,MAAMuB,yBAAyB,CAACsC,aAA1BtC,CAAwC,yBAAxCA,CAAN;AAEjB;AAAEH;AAAF,QAAckB,MAAd;AACNC,OAAG,CAACiB,KAAJjB,CAAU,0BAAVA,EAAsCnB,OAAtCmB;;AACInB,eAAO,KAAKmC,QAAQ,CAAC,KAAKvD,WAAL,CAAiBoB,OAAlB,EAA2B,EAA3B,CAApBA,EAAoD;AAClD;AACF,cAAM,KAAKhB,UAAL,CAAgB0D,WAAhB,CAA4B;AAAE1C,iBAAO,EAAE,KAAKpB,WAAL,CAAiBoB,OAA5B;AAAqC2C,gBAAM,EAAE;AAA7C,SAA5B,CAAN;AADF,OAAI,CAEF,OAAO5B,KAAP,EAAc;AACdI,WAAG,CAACJ,KAAJI,CAAUJ,KAAVI,EADc;AAGd;;AACM,mBAAKV,gBAAL,CAAsB;AAAEuB,yBAAe,EAAE;AAAnB,SAAtB;AACAY,kCAAoB,GAAGvD,cAAc,CAAChC,gBAAgB,CAACC,MAAlB,EAA0B0C,OAA1B,CAArC4C;AACN,aAAKnD,IAAL,CACEC,cAAc,CAACuB,OADjB,EAEEd,yBAAyB,CAAC0C,QAA1B1C,CACE,IADFA,wDAEiD,KAAKvB,WAAL,CAAiBkE,WAFlE,EAGI,aAHJ,EAGIC,MAHJ,CAGI,qBAAoB,SAApBH,wBAAoB,KAApB,sCAAoB,CAAEE,WAAtB,KAAqC9C,OAHzC,EAFF,gDAEE,EAFF;AASA,aAAKJ,MAAL,GAActB,cAAc,CAACqB,KAA7B;AACKE,0BAAa,IAAbA;AACL;AACD;AACF;;AACD,UAAM,KAAKb,UAAL,CAAgBgE,aAAhB,CAA8B,KAAKlE,SAAnC,CAAN;AACKmE,yBAAgB,KAAKnE,SAArBmE;AACL,SAAKrD,MAAL,GAActB,cAAc,CAAC4E,SAA7B;AACA,SAAKzD,IAAL,CAAUC,cAAc,CAACwD,SAAzB,EAAoC;AAAExC,aAAO,EAAE1C,eAAe,CAACC,iBAA3B;AAA8CkF,iBAAW,EAAE,KAAKtD;AAAhE,KAApC;AACD;;AAEOoD,iBAAe,CAACnE,SAAD,EAAyB;AAC9CA,aAAS,CAACgC,EAAVhC,CAAa,gBAAbA,EAA+B,MAAOiC,KAAP,IAA8B;AAC3D,UAAIA,KAAJ,EAAW;AACT,aAAKtB,IAAL,CAAUC,cAAc,CAACuB,OAAzB,EAAkCF,KAAlC;AACD;AAHH;AAKD;;AAEOzB,0BAAwB;AAC9B,UAAM8D,oBAAoB,GAAG,KAAK1E,cAAL,CAAoB4B,eAApB,IAAuC,EAApE;AACA8C,wBAAoB,CAACC,MAArBD,GAA8BA,oBAAoB,CAACC,MAArBD,IAA+B,kCAA7DA,CAF8B;;AAI9B,WAAO,IAAIE,aAAJ,CAAkBF,oBAAlB,CAAP;AACD;;AAtNmD","names":["WALLET_CONNECT_EXTENSION_ADAPTERS","name","chains","CHAIN_NAMESPACES","EIP155","logo","mobile","native","universal","desktop","WalletConnectV1Adapter","BaseAdapter","constructor","options","WALLET_ADAPTERS","WALLET_CONNECT_V1","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","_defineProperty","ADAPTER_STATUS","NOT_READY","uri","extensionAdapters","adapterOptions","_objectSpread","chainConfig","connected","connector","provider","wcProvider","_","Error","init","checkInitializationRequirements","getChainConfig","getWalletConnectInstance","WalletConnectProvider","config","emit","ADAPTER_EVENTS","READY","status","rehydrated","onConnectHandler","accounts","chainId","connect","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapterSettings","_this$adapterOptions$","qrcodeModal","createNewSession","adapter","Promise","resolve","reject","on","error","payload","ERRORED","params","log","Web3AuthError","WalletLoginError","connectionError","message","getUserInfo","notConnectedError","disconnect","arguments","cleanup","killSession","DISCONNECTED","opts","forceNewSession","pending","createSession","parseInt","debug","err","updateAdapterData","off","catch","invalidParams","switchChain","lookup","connectedChainConfig","fromCode","displayName","concat","setupProvider","subscribeEvents","CONNECTED","reconnected","walletConnectOptions","bridge","WalletConnect"],"sources":["../src/config.ts","../src/walletConnectV1adapter.ts"],"sourcesContent":[null,null]},"metadata":{},"sourceType":"module"}