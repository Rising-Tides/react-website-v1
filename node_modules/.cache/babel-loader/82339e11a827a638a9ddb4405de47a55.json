{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seins\\\\Documents\\\\GitHub\\\\react-website-v1\\\\src\\\\components\\\\pages\\\\Donate.js\";\nimport React from 'react';\nimport '../../App.css';\nimport { tipJar } from '../HeroSection';\nimport { Button } from '../Button';\nexport default function Donate() {\n  // return <h1 className='donate'>LIKE & SUBSCRIBE</h1>;\n  // const tipETH = async () => { \n  //   try {\n  //     const { ethereum } = window;\n  //     if (ethereum) {\n  //       // const provider = new ethers.providers.Web3Provider(ethereum);\n  //       // const signer = provider.getSigner();\n  //       const value = 0.01 // ether\n  //       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\n  //       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\n  //       // console.log(\"Initialize payment\");\n  //       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  //       // console.log(\"Mining... please wait\");\n  //       // await nftTxn.wait();\n  //       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  //     } else {\n  //       console.log(\"Ethereum object does not exist\");\n  //     }\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n  function sendEth(fromAddress, toAddress, etherValue) {\n    var weiValue = etherValue * Math.pow(10, 18);\n    var weiValueHex = weiValue.toString(16);\n\n    if (window.ethereum === undefined) {\n      console.log('[ethTip] sendEth called without window.ethereum object');\n      return;\n    }\n\n    var params = [{\n      to: toAddress,\n      from: fromAddress,\n      value: weiValueHex\n    }];\n    window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: params\n    }).then(result => {\n      console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\n      alert('Thanks for the eth! https://etherscan.io/tx/' + result);\n    }).catch(error => {\n      console.log('[ethTip] ' + error['message']);\n    });\n  }\n\n  function connectAndSendEth(toAddress, etherValue) {\n    if (window.ethereum === undefined) {\n      console.log('[ethTip] connectAndSendEth called without window.ethereum object');\n      return;\n    }\n\n    window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      if (accounts.length > 0) {\n        sendEth(accounts[0], toAddress, etherValue);\n      }\n    }).catch(error => {\n      console.log('[ethTip] Error: ' + JSON.stringify(error));\n    });\n  } // const connectWalletButton = () => {\n  //   return (\n  //     <Button  \n  //       className='btns'\n  //       buttonStyle='btn--primary'\n  //       buttonSize='btn--large'\n  //       onClick={connectWalletHandler}\n  //       >\n  //       CONNECT WALLET\n  //     </Button>\n  //   )\n  // }\n\n\n  const mintNftButton = () => {\n    return (\n      /*#__PURE__*/\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n      //   Mint NFT\n      // </button>\n      React.createElement(\"div\", {\n        className: \"tip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btns\",\n        buttonStyle: \"btn--outline\",\n        buttonSize: \"btn--large\",\n        onClick: () => {\n          connectAndSendEth(tipJar, 0.02);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, \"Donate\"))\n    );\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"donate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, mintNftButton());\n}","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/src/components/pages/Donate.js"],"names":["React","tipJar","Button","Donate","sendEth","fromAddress","toAddress","etherValue","weiValue","Math","pow","weiValueHex","toString","window","ethereum","undefined","console","log","params","to","from","value","request","method","then","result","alert","catch","error","connectAndSendEth","accounts","length","JSON","stringify","mintNftButton"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../App.css';\r\nimport { tipJar } from '../HeroSection';\r\nimport { Button } from '../Button';\r\n\r\nexport default function Donate() {\r\n  // return <h1 className='donate'>LIKE & SUBSCRIBE</h1>;\r\n    \r\n  // const tipETH = async () => { \r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  \r\n  //     if (ethereum) {\r\n  //       // const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       // const signer = provider.getSigner();\r\n  //       const value = 0.01 // ether\r\n  //       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\r\n      \r\n  //       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n  //       // console.log(\"Initialize payment\");\r\n  //       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n  //       // console.log(\"Mining... please wait\");\r\n  //       // await nftTxn.wait();\r\n  \r\n  //       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n  //     } else {\r\n  //       console.log(\"Ethereum object does not exist\");\r\n  //     }\r\n  \r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  function sendEth(fromAddress, toAddress, etherValue) {\r\n    var weiValue = etherValue * Math.pow(10, 18);\r\n      var weiValueHex = weiValue.toString(16);\r\n      \r\n    if (window.ethereum === undefined) {\r\n          console.log('[ethTip] sendEth called without window.ethereum object');\r\n          return;\r\n      }\r\n  \r\n      var params = [{\r\n          to: toAddress,\r\n          from: fromAddress,\r\n          value: weiValueHex\r\n      }];\r\n      \r\n    window.ethereum.request({\r\n          method: 'eth_sendTransaction',\r\n          params: params\r\n      }) \r\n      .then((result) => {\r\n          console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\r\n      alert('Thanks for the eth! https://etherscan.io/tx/' + result);\r\n    })\r\n      .catch((error) => {\r\n          console.log('[ethTip] ' + error['message']);\r\n      });\r\n  }\r\n  \r\n  function connectAndSendEth(toAddress, etherValue) {\r\n      if (window.ethereum === undefined) {\r\n          console.log('[ethTip] connectAndSendEth called without window.ethereum object');\r\n          return;\r\n      }\r\n  \r\n      window.ethereum.request(\r\n          { method: 'eth_requestAccounts' }\r\n      )\r\n      .then((accounts) => {\r\n          if (accounts.length > 0) {\r\n              sendEth(accounts[0], toAddress, etherValue);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.log('[ethTip] Error: ' + JSON.stringify(error));\r\n      });\r\n  } \r\n  // const connectWalletButton = () => {\r\n  //   return (\r\n  //     <Button  \r\n  //       className='btns'\r\n  //       buttonStyle='btn--primary'\r\n  //       buttonSize='btn--large'\r\n  //       onClick={connectWalletHandler}\r\n  //       >\r\n  //       CONNECT WALLET\r\n  //     </Button>\r\n  //   )\r\n  // }\r\n\r\n  const mintNftButton = () => {\r\n    return (\r\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n      //   Mint NFT\r\n      // </button>\r\n      <div className='tip'>\r\n        {/* <Button  \r\n          className='btns'\r\n          buttonStyle='btn--outline'\r\n          buttonSize='btn--large'\r\n          // onClick={mintNftHandler}\r\n          onClick={tipETH}\r\n          >\r\n          Send ETH\r\n        </Button> */}\r\n        <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => {connectAndSendEth(tipJar, 0.02)}}\r\n          >\r\n            Donate\r\n          </Button> \r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n  return(\r\n    <div className='donate'>\r\n      {mintNftButton()}\r\n    </div>\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}