{"ast":null,"code":"\"use strict\";\n/**\r\n *  BigNumber\r\n *\r\n *  A wrapper around the BN.js object. We use the BN.js library\r\n *  because it is used by elliptic, so it is required regardless.\r\n *\r\n */\n\nimport _classCallCheck from \"C:\\\\Users\\\\seins\\\\Documents\\\\GitHub\\\\react-website-v1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\seins\\\\Documents\\\\GitHub\\\\react-website-v1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n} // Only warn about passing 10 into radix once\n\nvar _warnedToStringRadix = false;\nexport var BigNumber = /*#__PURE__*/function () {\n  function BigNumber(constructorGuard, hex) {\n    _classCallCheck(this, BigNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  _createClass(BigNumber, [{\n    key: \"fromTwos\",\n    value: function fromTwos(value) {\n      return toBigNumber(toBN(this).fromTwos(value));\n    }\n  }, {\n    key: \"toTwos\",\n    value: function toTwos(value) {\n      return toBigNumber(toBN(this).toTwos(value));\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      if (this._hex[0] === \"-\") {\n        return BigNumber.from(this._hex.substring(1));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return toBigNumber(toBN(this).add(toBN(other)));\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n  }, {\n    key: \"div\",\n    value: function div(other) {\n      var o = BigNumber.from(other);\n\n      if (o.isZero()) {\n        throwFault(\"division-by-zero\", \"div\");\n      }\n\n      return toBigNumber(toBN(this).div(toBN(other)));\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(other) {\n      return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(other) {\n      var value = toBN(other);\n\n      if (value.isNeg()) {\n        throwFault(\"division-by-zero\", \"mod\");\n      }\n\n      return toBigNumber(toBN(this).umod(value));\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(other) {\n      var value = toBN(other);\n\n      if (value.isNeg()) {\n        throwFault(\"negative-power\", \"pow\");\n      }\n\n      return toBigNumber(toBN(this).pow(value));\n    }\n  }, {\n    key: \"and\",\n    value: function and(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"and\");\n      }\n\n      return toBigNumber(toBN(this).and(value));\n    }\n  }, {\n    key: \"or\",\n    value: function or(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"or\");\n      }\n\n      return toBigNumber(toBN(this).or(value));\n    }\n  }, {\n    key: \"xor\",\n    value: function xor(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"xor\");\n      }\n\n      return toBigNumber(toBN(this).xor(value));\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"mask\");\n      }\n\n      return toBigNumber(toBN(this).maskn(value));\n    }\n  }, {\n    key: \"shl\",\n    value: function shl(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shl\");\n      }\n\n      return toBigNumber(toBN(this).shln(value));\n    }\n  }, {\n    key: \"shr\",\n    value: function shr(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shr\");\n      }\n\n      return toBigNumber(toBN(this).shrn(value));\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return toBN(this).eq(toBN(other));\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return toBN(this).lt(toBN(other));\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      return toBN(this).lte(toBN(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return toBN(this).gt(toBN(other));\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      return toBN(this).gte(toBN(other));\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._hex[0] === \"-\";\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return toBN(this).isZero();\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      try {\n        return toBN(this).toNumber();\n      } catch (error) {\n        throwFault(\"overflow\", \"toNumber\", this.toString());\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      try {\n        return BigInt(this.toString());\n      } catch (e) {}\n\n      return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n        value: this.toString()\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Lots of people expect this, which we do not support, so check (See: #889)\n      if (arguments.length > 0) {\n        if (arguments[0] === 10) {\n          if (!_warnedToStringRadix) {\n            _warnedToStringRadix = true;\n            logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n          }\n        } else if (arguments[0] === 16) {\n          logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        } else {\n          logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n      }\n\n      return toBN(this).toString(10);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this._hex;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(key) {\n      return {\n        type: \"BigNumber\",\n        hex: this.toHexString()\n      };\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof BigNumber) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        if (value.match(/^-?0x[0-9a-f]+$/i)) {\n          return new BigNumber(_constructorGuard, toHex(value));\n        }\n\n        if (value.match(/^-?[0-9]+$/)) {\n          return new BigNumber(_constructorGuard, toHex(new BN(value)));\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n      }\n\n      if (typeof value === \"number\") {\n        if (value % 1) {\n          throwFault(\"underflow\", \"BigNumber.from\", value);\n        }\n\n        if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n          throwFault(\"overflow\", \"BigNumber.from\", value);\n        }\n\n        return BigNumber.from(String(value));\n      }\n\n      var anyValue = value;\n\n      if (typeof anyValue === \"bigint\") {\n        return BigNumber.from(anyValue.toString());\n      }\n\n      if (isBytes(anyValue)) {\n        return BigNumber.from(hexlify(anyValue));\n      }\n\n      if (anyValue) {\n        // Hexable interface (takes priority)\n        if (anyValue.toHexString) {\n          var hex = anyValue.toHexString();\n\n          if (typeof hex === \"string\") {\n            return BigNumber.from(hex);\n          }\n        } else {\n          // For now, handle legacy JSON-ified values (goes away in v6)\n          var _hex = anyValue._hex; // New-form JSON\n\n          if (_hex == null && anyValue.type === \"BigNumber\") {\n            _hex = anyValue.hex;\n          }\n\n          if (typeof _hex === \"string\") {\n            if (isHexString(_hex) || _hex[0] === \"-\" && isHexString(_hex.substring(1))) {\n              return BigNumber.from(_hex);\n            }\n          }\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isBigNumber\",\n    value: function isBigNumber(value) {\n      return !!(value && value._isBigNumber);\n    }\n  }]);\n\n  return BigNumber;\n}(); // Normalize the hex string\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have multiple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  var hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n} // value should have no prefix\n\n\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n} // value should have no prefix\n\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"mappings":"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","names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructorGuard","hex","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","sub","o","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","key","type","toHexString","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"sourceRoot":"","sources":["../src.ts/bignumber.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}