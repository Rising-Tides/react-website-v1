{"ast":null,"code":"import _regeneratorRuntime from\"/Users/scotteinsidler/Documents/GitHub/react-website-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/scotteinsidler/Documents/GitHub/react-website-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/scotteinsidler/Documents/GitHub/react-website-v1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import'../App.css';import{Button}from'./Button';import'./HeroSection.css';import{useEffect}from'react';import{useState}from'react';import{ethers}from'ethers';import contract from'../contracts/NFTCollectible.json';export var contractAddress=\"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\";var abi=contract.abi;function HeroSection(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var checkWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,handleEthereum,accounts,account;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:handleEthereum=function _handleEthereum(){var _window2=window,ethereum=_window2.ethereum;if(ethereum&&ethereum.isMetaMask){console.log('Ethereum successfully detected!');// Access the decentralized web!\n}else{console.log('Please install MetaMask  ');}};_window=window,ethereum=_window.ethereum;// if (!ethereum) {\n//   console.log(\"Make sure you have Metamask installed!\");\n//   return;\n// } else {\n//   console.log(\"Wallet exists! We're ready to go!\")\n// }\nif(window.ethereum){handleEthereum();}else{window.addEventListener('ethereum#initialized',handleEthereum,{once:true});// If the event is not dispatched by the end of the timeout,\n// the user probably doesn't have MetaMask installed.\nsetTimeout(handleEthereum,3000);// 3 seconds\n}_context.next=5;return ethereum.request({method:'eth_accounts'});case 5:accounts=_context.sent;if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account: \",account);setCurrentAccount(account);}else{console.log(\"No authorized account found\");}case 7:case\"end\":return _context.stop();}}},_callee);}));return function checkWalletIsConnected(){return _ref.apply(this,arguments);};}();var connectWalletHandler=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window3,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window3=window,ethereum=_window3.ethereum;if(!ethereum){alert(\"Please install Metamask\");window.location.replace(\"https://metamask.io/download/\");}_context2.prev=2;_context2.next=5;return ethereum.request({method:'eth_requestAccounts'});case 5:accounts=_context2.sent;console.log(\"Found an account! Address: \",accounts[0]);setCurrentAccount(accounts[0]);_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](2);console.log(_context2.t0);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[2,10]]);}));return function connectWalletHandler(){return _ref2.apply(this,arguments);};}();var mintNftHandler=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window4,ethereum,provider,signer,nftContract,nftTxn;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window4=window,ethereum=_window4.ethereum;if(!ethereum){_context3.next=16;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();nftContract=new ethers.Contract(contractAddress,abi,signer);console.log(\"Initialize payment\");_context3.next=9;return nftContract.mintNFTs(1,{value:ethers.utils.parseEther(\"0.01\")});case 9:nftTxn=_context3.sent;console.log(\"Mining... please wait\");_context3.next=13;return nftTxn.wait();case 13:console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");_context3.next=17;break;case 16:console.log(\"Ethereum object does not exist\");case 17:_context3.next=22;break;case 19:_context3.prev=19;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 22:case\"end\":return _context3.stop();}}},_callee3,null,[[0,19]]);}));return function mintNftHandler(){return _ref3.apply(this,arguments);};}();var connectWalletButton=function connectWalletButton(){return/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--primary\",buttonSize:\"btn--large\",onClick:connectWalletHandler},\"CONNECT WALLET\");};var mintNftButton=function mintNftButton(){return/*#__PURE__*/ (// <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//   Mint NFT\n// </button>\nReact.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:mintNftHandler},\"Mint NFT\"));};useEffect(function(){checkWalletIsConnected();},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"hero-container\"},/*#__PURE__*/React.createElement(\"video\",{src:\"/videos/video-2.mp4\",autoPlay:true,loop:true,muted:true}),/*#__PURE__*/React.createElement(\"h1\",null,\"ADVENTURE AWAITS\"),/*#__PURE__*/React.createElement(\"p\",null,\"What are you waiting for?\"),/*#__PURE__*/React.createElement(\"div\",{className:\"hero-btns\"}),/*#__PURE__*/React.createElement(\"div\",null,currentAccount?mintNftButton():connectWalletButton()));}export default HeroSection;","map":{"version":3,"sources":["/Users/scotteinsidler/Documents/GitHub/react-website-v1/src/components/HeroSection.js"],"names":["React","Button","useEffect","useState","ethers","contract","contractAddress","abi","HeroSection","currentAccount","setCurrentAccount","checkWalletIsConnected","handleEthereum","window","ethereum","isMetaMask","console","log","addEventListener","once","setTimeout","request","method","accounts","length","account","connectWalletHandler","alert","location","replace","mintNftHandler","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","mintNFTs","value","utils","parseEther","nftTxn","wait","connectWalletButton","mintNftButton"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport { Button } from './Button';\nimport './HeroSection.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport contract from '../contracts/NFTCollectible.json';\n\nexport const contractAddress = \"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\";\nconst abi = contract.abi;\n\n\nfunction HeroSection() {\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => { \n    const { ethereum } = window;\n  \n    // if (!ethereum) {\n    //   console.log(\"Make sure you have Metamask installed!\");\n    //   return;\n    // } else {\n    //   console.log(\"Wallet exists! We're ready to go!\")\n    // }\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true,\n      });\n    \n      // If the event is not dispatched by the end of the timeout,\n      // the user probably doesn't have MetaMask installed.\n      setTimeout(handleEthereum, 3000); // 3 seconds\n    }\n    \n    function handleEthereum() {\n      const { ethereum } = window;\n      if (ethereum && ethereum.isMetaMask) {\n        console.log('Ethereum successfully detected!');\n        // Access the decentralized web!\n      } else {\n        console.log('Please install MetaMask  ');\n      }\n    }\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n  \n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account); \n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n  \n  const connectWalletHandler = async () => { \n    const { ethereum } = window;\n  \n    if (!ethereum) {\n       alert(\"Please install Metamask\");\n      window.location.replace(\"https://metamask.io/download/\");\n    }\n  \n    try {\n      const accounts = await ethereum.request({method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n  \n  const mintNftHandler = async () => { \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n  \n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  \n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n  \n        console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  \n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n  \n    } catch (err) {\n      console.log(err);\n    }\n  }\n  \n  const connectWalletButton = () => {\n    return (\n      <Button  \n        className='btns'\n        buttonStyle='btn--primary'\n        buttonSize='btn--large'\n        onClick={connectWalletHandler}\n        >\n        CONNECT WALLET\n      </Button>\n    )\n  }\n  \n  const mintNftButton = () => {\n    return (\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n      //   Mint NFT\n      // </button>\n      <Button  \n        className='btns'\n        buttonStyle='btn--outline'\n        buttonSize='btn--large'\n        onClick={mintNftHandler}\n        >\n        Mint NFT\n      </Button>\n    )\n  }\n  \n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])  \n  return (\n    <div className='hero-container'>\n      <video src='/videos/video-2.mp4' autoPlay loop muted />\n      <h1>ADVENTURE AWAITS</h1>\n      <p>What are you waiting for?</p>\n      <div className='hero-btns'>\n        {/* <Button\n          className='btns'\n          buttonStyle='btn--outline'\n          buttonSize='btn--large'\n        >\n          GET STARTED\n        </Button>\n        <Button\n          className='btns'\n          buttonStyle='btn--primary'\n          buttonSize='btn--large'\n          onClick={console.log('hey')}\n        >\n          WATCH TRAILER <i className='far fa-play-circle' />\n        </Button> */}\n      </div>\n      <div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>      \n    </div>\n  );\n}\n\nexport default HeroSection;\n\n"]},"metadata":{},"sourceType":"module"}