{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };","map":{"version":3,"mappings":"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","names":["MetamaskAdapter","BaseAdapter","constructor","adapterOptions","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","_defineProperty","chainConfig","provider","status","CONNECTED","metamaskProvider","_","Error","init","options","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","setAdapterSettings","checkConnectionRequirements","getChainConfig","CONNECTING","adapter","WalletLoginError","notConnectedError","request","method","chainId","switchChain","once","disconnect","reconnected","connectionError","arguments","cleanup","disconnectionError","_this$provider","removeAllListeners","DISCONNECTED","getUserInfo","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sources":["../src/metamaskAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}