{"ast":null,"code":"const Web3 = require('web3');\n\nconst privateKeyToAddress = require('ethereum-private-key-to-address');\n\nconst PrivateKeyProvider = require('truffle-privatekey-provider');\n\nconst chalk = require('chalk');\n\nasync function send(config) {\n  const privateKey = (config.from || '').replace(/^0x/, '');\n  const to = config.to;\n  let amount = config.amount || 0;\n  let value = config.value || 0;\n  const network = (config.network || 'mainnet').toLowerCase();\n  let providerUri = `https://${network}.infura.io/`;\n\n  if (/^(http|ws)/.test(network)) {\n    providerUri = network;\n  } else if (network === 'local' || network === 'development') {\n    providerUri = 'http://localhost:8545';\n  }\n\n  const provider = new PrivateKeyProvider(privateKey, providerUri);\n  const web3 = new Web3(provider);\n\n  if (value && amount) {\n    console.warn(chalk.yellow('warning: both \"value\" and \"amount\" set. Using \"value\" instead.'));\n  }\n\n  if (value) {\n    amount = web3.utils.fromWei(value, 'ether');\n  } else {\n    value = web3.utils.toWei(amount, 'ether');\n  }\n\n  const from = privateKeyToAddress(privateKey);\n  const data = config.data || '0x';\n  const gas = config.gas || 21000;\n  const gasPrice = config.gasPrice || (await web3.eth.getGasPrice());\n\n  if (config.log) {\n    console.log(chalk.yellow('sending transaction:'));\n    console.log('\\nnetwork:  %s', network);\n    console.log('from:     %s', from);\n    console.log('to:       %s', to);\n    console.log('amount:   %s ETH (%s wei)', amount, value);\n    console.log('gas:      %s', gas);\n    console.log('gasPrice: %s gwei', web3.utils.fromWei(gasPrice, 'gwei'));\n  }\n\n  const txHash = await new Promise((resolve, reject) => {\n    web3.eth.sendTransaction({\n      from,\n      to,\n      value,\n      data,\n      gas,\n      gasPrice\n    }, (err, txHash) => {\n      if (err) return reject(err);\n      resolve(txHash);\n    });\n  });\n\n  if (config.log) {\n    console.log('\\ntx hash:  %s', txHash);\n  }\n\n  return txHash;\n}\n\nmodule.exports = send;","map":{"version":3,"sources":["/Users/scotteinsidler/Documents/GitHub/react-website-v1/node_modules/eth-send/index.js"],"names":["Web3","require","privateKeyToAddress","PrivateKeyProvider","chalk","send","config","privateKey","from","replace","to","amount","value","network","toLowerCase","providerUri","test","provider","web3","console","warn","yellow","utils","fromWei","toWei","data","gas","gasPrice","eth","getGasPrice","log","txHash","Promise","resolve","reject","sendTransaction","err","module","exports"],"mappings":"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","sourcesContent":["const Web3 = require('web3')\nconst privateKeyToAddress = require('ethereum-private-key-to-address')\nconst PrivateKeyProvider = require('truffle-privatekey-provider')\nconst chalk = require('chalk')\n\nasync function send (config) {\n  const privateKey = (config.from || '').replace(/^0x/, '')\n  const to = config.to\n  let amount = config.amount || 0\n  let value = config.value || 0\n  const network = (config.network || 'mainnet').toLowerCase()\n\n  let providerUri = `https://${network}.infura.io/`\n  if (/^(http|ws)/.test(network)) {\n    providerUri = network\n  } else if (network === 'local' || network === 'development') {\n    providerUri = 'http://localhost:8545'\n  }\n\n  const provider = new PrivateKeyProvider(privateKey, providerUri)\n  const web3 = new Web3(provider)\n\n  if (value && amount) {\n    console.warn(chalk.yellow('warning: both \"value\" and \"amount\" set. Using \"value\" instead.'))\n  }\n\n  if (value) {\n    amount = web3.utils.fromWei(value, 'ether')\n  } else {\n    value = web3.utils.toWei(amount, 'ether')\n  }\n\n  const from = privateKeyToAddress(privateKey)\n  const data = config.data || '0x'\n  const gas = config.gas || 21000\n  const gasPrice = config.gasPrice || await web3.eth.getGasPrice()\n\n  if (config.log) {\n    console.log(chalk.yellow('sending transaction:'))\n    console.log('\\nnetwork:  %s', network)\n    console.log('from:     %s', from)\n    console.log('to:       %s', to)\n    console.log('amount:   %s ETH (%s wei)', amount, value)\n    console.log('gas:      %s', gas)\n    console.log('gasPrice: %s gwei', web3.utils.fromWei(gasPrice, 'gwei'))\n  }\n\n  const txHash = await new Promise((resolve, reject) => {\n    web3.eth.sendTransaction({\n      from,\n      to,\n      value,\n      data,\n      gas,\n      gasPrice\n    }, (err, txHash) => {\n      if (err) return reject(err)\n      resolve(txHash)\n    })\n  })\n\n  if (config.log) {\n    console.log('\\ntx hash:  %s', txHash)\n  }\n\n  return txHash\n}\n\nmodule.exports = send\n"]},"metadata":{},"sourceType":"script"}