{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, log, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n\n      try {\n        await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };","map":{"version":3,"mappings":"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","names":["SolanaWalletAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","_defineProperty","torusWalletOptions","adapterSettings","initParams","loginSettings","chainConfig","provider","status","CONNECTED","solanaProvider","_","Error","init","options","checkInitializationRequirements","network","getChainConfig","blockExplorer","displayName","ticker","tickerName","rpcTarget","chainId","blockExplorerUrl","logo","torusInstance","Torus","showTorusButton","TorusInjectedProvider","config","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","log","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","setupProvider","Web3AuthError","code","setProvider","reconnected","WalletLoginError","connectionError","disconnect","arguments","cleanup","notConnectedError","logout","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings"],"sources":["../src/solanaWalletAdapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}