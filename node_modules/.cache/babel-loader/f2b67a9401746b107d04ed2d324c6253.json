{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seins\\\\Documents\\\\GitHub\\\\react-website-v1\\\\src\\\\components\\\\HeroSection.js\";\nimport React from 'react';\nimport '../App.css';\nimport { Button } from './Button';\nimport './HeroSection.css';\nimport { useEffect } from 'react'; // import { useState } from 'react';\n\nimport $ from 'jquery'; // import { Link } from 'react-router-dom';\n// import ethSend from 'eth-send';\n// import Web3 from 'web3';\n// import { ethers } from 'ethers';\n// import contract from '../contracts/NFTCollectible.json';\n\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { useWeb3React } from '@web3-react/core';\nexport const CoinbaseWallet = new WalletLinkConnector({\n  url: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\n  appName: \"Web3-react Demo\",\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\nexport const WalletConnect = new WalletConnectConnector({\n  rpcUrl: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcode: true\n});\nexport const Injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\nexport const tipJar = \"0x8DAA10845A8144469da192ef18b13bCdFBb73591\";\nexport const contractAddress = \"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\"; // const abi = contract.abi;\n\nfunction HeroSection() {\n  const {\n    activate,\n    deactivate\n  } = useWeb3React(); // const [currentAccount, setCurrentAccount] = useState(null);\n  // const [setCurrentAccount] = useState(null);\n  // const checkWalletIsConnected = async () => { \n  //   const { ethereum } = window;\n  //   // if (!ethereum) {\n  //   //   console.log(\"Make sure you have Metamask installed!\");\n  //   //   return;\n  //   // } else {\n  //   //   console.log(\"Wallet exists! We're ready to go!\")\n  //   // }\n  //   if (window.ethereum) {\n  //     handleEthereum();\n  //   } else {\n  //     window.addEventListener('ethereum#initialized', handleEthereum, {\n  //       once: true,\n  //     });\n  //     // If the event is not dispatched by the end of the timeout,\n  //     // the user probably doesn't have MetaMask installed.\n  //     setTimeout(handleEthereum, 3000); // 3 seconds\n  //   }\n  //   function handleEthereum() {\n  //     const { ethereum } = window;\n  //     if (ethereum && ethereum.isMetaMask) {\n  //       console.log('Ethereum successfully detected!');\n  //       // Access the decentralized web!\n  //     } else {\n  //       console.log('Please install MetaMask  ');\n  //     }\n  //   }\n  //   const accounts = await ethereum.request({ method: 'eth_accounts' });\n  //   if (accounts.length !== 0) {\n  //     const account = accounts[0];\n  //     console.log(\"Found an authorized account: \", account);\n  //     setCurrentAccount(account); \n  //   } else {\n  //     console.log(\"No authorized account found\");\n  //   }\n  // }\n  // const connectWalletHandler = async () => { \n  //   const { ethereum } = window;\n  //   if (!ethereum) {\n  //      alert(\"Please install Metamask\");\n  //     window.location.replace(\"https://metamask.io/download/\");\n  //   }\n  //   try {\n  //     const accounts = await ethereum.request({method: 'eth_requestAccounts' });\n  //     console.log(\"Found an account! Address: \", accounts[0]);\n  //     setCurrentAccount(accounts[0]);\n  //   } catch (err) {\n  //     console.log(err)\n  //   }\n  // }\n  // const mintNftHandler = async () => { \n  //   try {\n  //     const { ethereum } = window;\n  //     if (ethereum) {\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const nftContract = new ethers.Contract(contractAddress, abi, signer);\n  //       console.log(\"Initialize payment\");\n  //       let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  //       console.log(\"Mining... please wait\");\n  //       await nftTxn.wait();\n  //       console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  //     } else {\n  //       console.log(\"Ethereum object does not exist\");\n  //     }\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n  // const tipETH = async () => { \n  //   try {\n  //     const { ethereum } = window;\n  //     if (ethereum) {\n  //       // const provider = new ethers.providers.Web3Provider(ethereum);\n  //       // const signer = provider.getSigner();\n  //       const value = 0.01 // ether\n  //       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\n  //       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\n  //       // console.log(\"Initialize payment\");\n  //       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  //       // console.log(\"Mining... please wait\");\n  //       // await nftTxn.wait();\n  //       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  //     } else {\n  //       console.log(\"Ethereum object does not exist\");\n  //     }\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n  // // const connectWalletButton = () => {\n  // //   return (\n  // //     <Button  \n  // //       className='btns'\n  // //       buttonStyle='btn--primary'\n  // //       buttonSize='btn--large'\n  // //       onClick={connectWalletHandler}\n  // //       >\n  // //       CONNECT WALLET\n  // //     </Button>\n  // //   )\n  // // }\n  // const mintNftButton = () => {\n  //   return (\n  //     // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n  //     //   Mint NFT\n  //     // </button>\n  //     <Button  \n  //       className='btns'\n  //       buttonStyle='btn--outline'\n  //       buttonSize='btn--large'\n  //       // onClick={mintNftHandler}\n  //       onClick={tipETH}\n  //       >\n  //       Send Tip\n  //     </Button>\n  //   )\n  // }\n  // var images = [\"img_1.jpg\",\"img_2.jpg\",\"img_3.jpg\"];\n  // function slideshow() { \n  //   if (cnt>=images.length) cnt=0; \n  //     $('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\");\n  // }\n\n  function sendEth(fromAddress, toAddress, etherValue) {\n    var weiValue = etherValue * Math.pow(10, 18);\n    var weiValueHex = weiValue.toString(16);\n\n    if (window.ethereum === undefined) {\n      console.log('[ethTip] sendEth called without window.ethereum object');\n      return;\n    }\n\n    var params = [{\n      to: toAddress,\n      from: fromAddress,\n      value: weiValueHex\n    }];\n    window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: params\n    }).then(result => {\n      console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\n      alert('Thanks for the eth! https://etherscan.io/tx/' + result);\n    }).catch(error => {\n      console.log('[ethTip] ' + error['message']);\n    });\n  }\n\n  function connectAndSendEth(toAddress, etherValue) {\n    if (window.ethereum === undefined) {\n      console.log('[ethTip] connectAndSendEth called without window.ethereum object');\n      return;\n    }\n\n    window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      if (accounts.length > 0) {\n        sendEth(accounts[0], toAddress, etherValue);\n      }\n    }).catch(error => {\n      console.log('[ethTip] Error: ' + JSON.stringify(error));\n    });\n  }\n\n  useEffect(() => {\n    // checkWalletIsConnected();\n    var images = [\"images/IMG_9.jpg\", \"images/IMG_2.jpg\", \"images/IMG_6.jpg\", \"images/IMG_4.jpg\"];\n    var cnt = 0;\n    const iId = setInterval(() => {\n      if (cnt >= images.length) cnt = 0;\n      $('.hero-container').css(\"background-image\", \"url(\" + images[cnt++] + \")\", \"center center/cover no-repeat\");\n    }, 2500);\n    return () => clearInterval(iId);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hero-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hero-btns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: () => window.open('https://instagram.com/xojustkirst'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-instagram\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: () => window.open('https://twitch.tv/xojustkirst'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-twitch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: () => {\n      activate(CoinbaseWallet);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, \"Coinbase Wallet\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: () => {\n      activate(WalletConnect);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, \"Wallet Connect\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: () => {\n      activate(Injected);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }\n  }, \"Metamask\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: deactivate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, \"Disconnect\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"btns\",\n    buttonStyle: \"btn--outline\",\n    buttonSize: \"btn--large\",\n    onClick: connectAndSendEth(tipJar, 0.02),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 11\n    }\n  }, \"Donate\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default HeroSection;","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/src/components/HeroSection.js"],"names":["React","Button","useEffect","$","WalletLinkConnector","WalletConnectConnector","InjectedConnector","useWeb3React","CoinbaseWallet","url","process","env","INFURA_KEY","appName","supportedChainIds","WalletConnect","rpcUrl","bridge","qrcode","Injected","tipJar","contractAddress","HeroSection","activate","deactivate","sendEth","fromAddress","toAddress","etherValue","weiValue","Math","pow","weiValueHex","toString","window","ethereum","undefined","console","log","params","to","from","value","request","method","then","result","alert","catch","error","connectAndSendEth","accounts","length","JSON","stringify","images","cnt","iId","setInterval","css","clearInterval","open"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport { Button } from './Button';\r\nimport './HeroSection.css';\r\nimport { useEffect } from 'react';\r\n// import { useState } from 'react';\r\nimport $ from 'jquery';\r\n// import { Link } from 'react-router-dom';\r\n\r\n// import ethSend from 'eth-send';\r\n// import Web3 from 'web3';\r\n\r\n// import { ethers } from 'ethers';\r\n// import contract from '../contracts/NFTCollectible.json';\r\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\r\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport const CoinbaseWallet = new WalletLinkConnector({\r\n url: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\r\n appName: \"Web3-react Demo\",\r\n supportedChainIds: [1, 3, 4, 5, 42],\r\n});\r\n\r\nexport const WalletConnect = new WalletConnectConnector({\r\n rpcUrl: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\r\n bridge: \"https://bridge.walletconnect.org\",\r\n qrcode: true,\r\n});\r\n\r\nexport const Injected = new InjectedConnector({\r\n supportedChainIds: [1, 3, 4, 5, 42]\r\n});\r\nexport const tipJar = \"0x8DAA10845A8144469da192ef18b13bCdFBb73591\";\r\nexport const contractAddress = \"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\";\r\n// const abi = contract.abi;\r\n\r\n\r\nfunction HeroSection() {\r\n  const { activate, deactivate} = useWeb3React();\r\n  // const [currentAccount, setCurrentAccount] = useState(null);\r\n  // const [setCurrentAccount] = useState(null);\r\n\r\n  // const checkWalletIsConnected = async () => { \r\n  //   const { ethereum } = window;\r\n  \r\n  //   // if (!ethereum) {\r\n  //   //   console.log(\"Make sure you have Metamask installed!\");\r\n  //   //   return;\r\n  //   // } else {\r\n  //   //   console.log(\"Wallet exists! We're ready to go!\")\r\n  //   // }\r\n  //   if (window.ethereum) {\r\n  //     handleEthereum();\r\n  //   } else {\r\n  //     window.addEventListener('ethereum#initialized', handleEthereum, {\r\n  //       once: true,\r\n  //     });\r\n    \r\n  //     // If the event is not dispatched by the end of the timeout,\r\n  //     // the user probably doesn't have MetaMask installed.\r\n  //     setTimeout(handleEthereum, 3000); // 3 seconds\r\n  //   }\r\n    \r\n  //   function handleEthereum() {\r\n  //     const { ethereum } = window;\r\n  //     if (ethereum && ethereum.isMetaMask) {\r\n  //       console.log('Ethereum successfully detected!');\r\n  //       // Access the decentralized web!\r\n  //     } else {\r\n  //       console.log('Please install MetaMask  ');\r\n  //     }\r\n  //   }\r\n  //   const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n  \r\n  //   if (accounts.length !== 0) {\r\n  //     const account = accounts[0];\r\n  //     console.log(\"Found an authorized account: \", account);\r\n  //     setCurrentAccount(account); \r\n  //   } else {\r\n  //     console.log(\"No authorized account found\");\r\n  //   }\r\n  // }\r\n  \r\n  // const connectWalletHandler = async () => { \r\n  //   const { ethereum } = window;\r\n  \r\n  //   if (!ethereum) {\r\n  //      alert(\"Please install Metamask\");\r\n  //     window.location.replace(\"https://metamask.io/download/\");\r\n  //   }\r\n  \r\n  //   try {\r\n  //     const accounts = await ethereum.request({method: 'eth_requestAccounts' });\r\n  //     console.log(\"Found an account! Address: \", accounts[0]);\r\n  //     setCurrentAccount(accounts[0]);\r\n  //   } catch (err) {\r\n  //     console.log(err)\r\n  //   }\r\n  // }\r\n  \r\n  // const mintNftHandler = async () => { \r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  \r\n  //     if (ethereum) {\r\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       const signer = provider.getSigner();\r\n  //       const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n  //       console.log(\"Initialize payment\");\r\n  //       let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n  //       console.log(\"Mining... please wait\");\r\n  //       await nftTxn.wait();\r\n  \r\n  //       console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n  //     } else {\r\n  //       console.log(\"Ethereum object does not exist\");\r\n  //     }\r\n  \r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  \r\n  // const tipETH = async () => { \r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  \r\n  //     if (ethereum) {\r\n  //       // const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       // const signer = provider.getSigner();\r\n  //       const value = 0.01 // ether\r\n  //       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\r\n      \r\n  //       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n  //       // console.log(\"Initialize payment\");\r\n  //       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n  //       // console.log(\"Mining... please wait\");\r\n  //       // await nftTxn.wait();\r\n  \r\n  //       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n  //     } else {\r\n  //       console.log(\"Ethereum object does not exist\");\r\n  //     }\r\n  \r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  \r\n  // // const connectWalletButton = () => {\r\n  // //   return (\r\n  // //     <Button  \r\n  // //       className='btns'\r\n  // //       buttonStyle='btn--primary'\r\n  // //       buttonSize='btn--large'\r\n  // //       onClick={connectWalletHandler}\r\n  // //       >\r\n  // //       CONNECT WALLET\r\n  // //     </Button>\r\n  // //   )\r\n  // // }\r\n  \r\n  // const mintNftButton = () => {\r\n  //   return (\r\n  //     // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n  //     //   Mint NFT\r\n  //     // </button>\r\n  //     <Button  \r\n  //       className='btns'\r\n  //       buttonStyle='btn--outline'\r\n  //       buttonSize='btn--large'\r\n  //       // onClick={mintNftHandler}\r\n  //       onClick={tipETH}\r\n  //       >\r\n  //       Send Tip\r\n  //     </Button>\r\n  //   )\r\n  // }\r\n  // var images = [\"img_1.jpg\",\"img_2.jpg\",\"img_3.jpg\"];\r\n  \r\n  // function slideshow() { \r\n  //   if (cnt>=images.length) cnt=0; \r\n  //     $('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\");\r\n  // }\r\n  function sendEth(fromAddress, toAddress, etherValue) {\r\n    var weiValue = etherValue * Math.pow(10, 18);\r\n      var weiValueHex = weiValue.toString(16);\r\n      \r\n    if (window.ethereum === undefined) {\r\n          console.log('[ethTip] sendEth called without window.ethereum object');\r\n          return;\r\n      }\r\n  \r\n      var params = [{\r\n          to: toAddress,\r\n          from: fromAddress,\r\n          value: weiValueHex\r\n      }];\r\n      \r\n    window.ethereum.request({\r\n          method: 'eth_sendTransaction',\r\n          params: params\r\n      }) \r\n      .then((result) => {\r\n          console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\r\n      alert('Thanks for the eth! https://etherscan.io/tx/' + result);\r\n    })\r\n      .catch((error) => {\r\n          console.log('[ethTip] ' + error['message']);\r\n      });\r\n  }\r\n  \r\n  function connectAndSendEth(toAddress, etherValue) {\r\n      if (window.ethereum === undefined) {\r\n          console.log('[ethTip] connectAndSendEth called without window.ethereum object');\r\n          return;\r\n      }\r\n  \r\n      window.ethereum.request(\r\n          { method: 'eth_requestAccounts' }\r\n      )\r\n      .then((accounts) => {\r\n          if (accounts.length > 0) {\r\n              sendEth(accounts[0], toAddress, etherValue);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.log('[ethTip] Error: ' + JSON.stringify(error));\r\n      });\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    // checkWalletIsConnected();\r\n\r\n    var images = [\"images/IMG_9.jpg\", \"images/IMG_2.jpg\",\"images/IMG_6.jpg\", \"images/IMG_4.jpg\"];\r\n\r\n    var cnt = 0;\r\n    const iId=setInterval(() => {\r\n      if (cnt>=images.length) cnt=0; \r\n        $('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\", \"center center/cover no-repeat\");\r\n    }, 2500);\r\n    return () => clearInterval(iId);\r\n\r\n  }, [])  \r\n\r\n  return (\r\n\r\n\r\n    <div className='hero-container'>\r\n      {/* <video src='/videos/video-2.mp4' autoPlay loop muted /> */}\r\n      {/* <img src='/images/IMG_1.jpg'>''</img> */}\r\n      {/* <h1>XOJUSTKIRST</h1> */}\r\n      {/* <p>What are you waiting for?</p> */}\r\n      {/* <p>Send Kirstin some Ethereum!</p> */}\r\n      <div className='hero-btns'>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={()=> window.open('https://instagram.com/xojustkirst')}\r\n          >\r\n          \r\n              <i className='fa fa-instagram' />\r\n\r\n          </Button> \r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={()=> window.open('https://twitch.tv/xojustkirst')}\r\n          >\r\n            <i className='fa fa-twitch' />\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(CoinbaseWallet) }}\r\n          >\r\n            Coinbase Wallet\r\n          </Button>\r\n        </div>\r\n        <div>  \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(WalletConnect) }}\r\n          >\r\n            Wallet Connect\r\n          </Button>\r\n        </div>\r\n        <div>  \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(Injected) }}\r\n          >\r\n            Metamask\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={deactivate}\r\n          >\r\n            Disconnect\r\n          </Button> \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={connectAndSendEth(tipJar, 0.02)}\r\n          >\r\n            Donate\r\n          </Button> \r\n        </div>\r\n\r\n      </div>\r\n      <div>\r\n        {/* {currentAccount ? mintNftButton() : connectWalletButton()} */}\r\n        {/* {mintNftButton()} */}\r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeroSection;\r\n\r\n"]},"metadata":{},"sourceType":"module"}