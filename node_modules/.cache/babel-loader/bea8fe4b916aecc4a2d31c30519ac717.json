{"ast":null,"code":"var a = (n => (n.MissingApiKey = \"MISSING_API_KEY\", n.ModalNotReady = \"MODAL_NOT_READY\", n.MalformedResponse = \"MALFORMED_RESPONSE\", n.InvalidArgument = \"INVALID_ARGUMENT\", n.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", n.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", n))(a || {}),\n    p = (_ => (_.SyncWeb3Method = \"SYNC_WEB3_METHOD\", _.DuplicateIframe = \"DUPLICATE_IFRAME\", _.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", _.DeprecationNotice = \"DEPRECATION_NOTICE\", _))(p || {}),\n    m = (e => (e[e.ParseError = -32700] = \"ParseError\", e[e.InvalidRequest = -32600] = \"InvalidRequest\", e[e.MethodNotFound = -32601] = \"MethodNotFound\", e[e.InvalidParams = -32602] = \"InvalidParams\", e[e.InternalError = -32603] = \"InternalError\", e[e.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", e[e.MagicLinkExpired = -10001] = \"MagicLinkExpired\", e[e.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", e[e.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", e[e.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", e[e.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", e[e.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", e[e.InactiveRecipient = -10010] = \"InactiveRecipient\", e[e.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", e))(m || {});\n\nvar u = (t => (t.LoginWithSms = \"magic_auth_login_with_sms\", t.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", t.LoginWithCredential = \"magic_auth_login_with_credential\", t.GetIdToken = \"magic_auth_get_id_token\", t.GenerateIdToken = \"magic_auth_generate_id_token\", t.GetMetadata = \"magic_auth_get_metadata\", t.IsLoggedIn = \"magic_auth_is_logged_in\", t.Logout = \"magic_auth_logout\", t.UpdateEmail = \"magic_auth_update_email\", t.UserSettings = \"magic_auth_settings\", t.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", t.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", t.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", t.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", t.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", t.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", t.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", t.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", t.LogoutTestMode = \"magic_auth_logout_testing_mode\", t.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", t))(u || {});\n\nvar o = (i => (i.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", i.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", i.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", i.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", i.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", i))(o || {}),\n    g = (s => (s.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", s))(g || {});\n\nvar l = (s => (s.Harmony = \"HARMONY\", s))(l || {});\n\nexport { l as EthChainType, o as MagicIncomingWindowMessage, g as MagicOutgoingWindowMessage, u as MagicPayloadMethod, m as RPCErrorCode, a as SDKErrorCode, p as SDKWarningCode };","map":{"version":3,"mappings":"AAAO,IAAKA,IAAL,CAAKC,MACVA,kBAAgB,iBAAhB,EACAA,kBAAgB,iBADhB,EAEAA,sBAAoB,oBAFpB,EAGAA,oBAAkB,kBAHlB,EAIAA,4BAA0B,2BAJ1B,EAKAA,2BAAyB,yBALzB,EADUA,EAAL,EAAKD,OAAL;AAAA,IASKE,IAAL,CAAKC,MACVA,mBAAiB,kBAAjB,EACAA,oBAAkB,kBADlB,EAEAA,qCAAmC,qCAFnC,EAGAA,sBAAoB,oBAHpB,EADUA,EAAL,EAAKD,OAAL,CATA;AAAA,IAgBKE,IAAL,CAAKC,MAEVA,iBAAa,MAAb,kBACAA,qBAAiB,MAAjB,oBADA,EAEAA,qBAAiB,MAAjB,oBAFA,EAGAA,oBAAgB,MAAhB,mBAHA,EAIAA,oBAAgB,MAAhB,mBAJA,EAOAA,kCAA8B,IAA9B,iCAPA,EAQAA,uBAAmB,MAAnB,sBARA,EASAA,2BAAuB,MAAvB,0BATA,EAUAA,kCAA8B,MAA9B,iCAVA,EAWAA,0BAAsB,MAAtB,yBAXA,EAYAA,wBAAoB,MAApB,uBAZA,EAaAA,2BAAuB,MAAvB,0BAbA,EAcAA,wBAAoB,MAApB,uBAdA,EAeAA,yBAAqB,MAArB,wBAfA,EAFUA,EAAL,EAAKD,OAAL,CAhBA;;ACyCA,IAAKE,IAAL,CAAKC,MACVA,iBAAe,2BAAf,EACAA,uBAAqB,kCADrB,EAEAA,wBAAsB,kCAFtB,EAGAA,eAAa,yBAHb,EAIAA,oBAAkB,8BAJlB,EAKAA,gBAAc,yBALd,EAMAA,eAAa,yBANb,EAOAA,WAAS,mBAPT,EAQAA,gBAAc,yBARd,EASAA,iBAAe,qBATf,EAUAA,yBAAuB,kCAVvB,EAWAA,yBAAuB,wCAXvB,EAYAA,+BAA6B,0CAZ7B,EAaAA,gCAA8B,+CAb9B,EAcAA,uBAAqB,sCAdrB,EAeAA,4BAA0B,2CAf1B,EAgBAA,wBAAsB,sCAhBtB,EAiBAA,uBAAqB,sCAjBrB,EAkBAA,mBAAiB,gCAlBjB,EAmBAA,wBAAsB,sCAnBtB,EADUA,EAAL,EAAKD,OAAL;;ACvCA,IAAKE,IAAL,CAAKC,MACVA,0BAAwB,uBAAxB,EACAA,wBAAsB,qBADtB,EAEAA,uBAAqB,oBAFrB,EAGAA,uBAAqB,oBAHrB,EAIAA,uBAAqB,oBAJrB,EADUA,EAAL,EAAKD,OAAL;AAAA,IAQKE,IAAL,CAAKC,MACVA,yBAAuB,sBAAvB,EADUA,EAAL,EAAKD,OAAL,CARA;;ACAA,IAAKE,IAAL,CAAKD,MACVA,YAAU,SAAV,EADUA,EAAL,EAAKC,OAAL;;AAAK","names":["a","n","p","_","m","e","u","t","o","i","g","s","l"],"sources":["../../src/core/exception-types.ts","../../src/core/json-rpc-types.ts","../../src/core/message-types.ts","../../src/modules/rpc-provider-types.ts"],"sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export type EthNetworkName = 'mainnet' | 'rinkeby' | 'ropsten' | 'kovan';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"]},"metadata":{},"sourceType":"module"}