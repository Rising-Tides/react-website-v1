{"ast":null,"code":"import React from'react';import'../../App.css';import{tipJar}from'../HeroSection';import{Button}from'../Button';import{WalletLinkConnector}from\"@web3-react/walletlink-connector\";import{WalletConnectConnector}from\"@web3-react/walletconnect-connector\";import{InjectedConnector}from\"@web3-react/injected-connector\";import{useWeb3React}from'@web3-react/core';export var CoinbaseWallet=new WalletLinkConnector({url:\"https://mainnet.infura.io/v3/\".concat(process.env.INFURA_KEY),appName:\"Web3-react Demo\",supportedChainIds:[1,3,4,5,42]});export var WalletConnect=new WalletConnectConnector({rpcUrl:\"https://mainnet.infura.io/v3/\".concat(process.env.INFURA_KEY),bridge:\"https://bridge.walletconnect.org\",qrcode:true});export var Injected=new InjectedConnector({supportedChainIds:[1,3,4,5,42]});export default function Donate(){// return <h1 className='donate'>LIKE & SUBSCRIBE</h1>;\n// const tipETH = async () => { \n//   try {\n//     const { ethereum } = window;\n//     if (ethereum) {\n//       // const provider = new ethers.providers.Web3Provider(ethereum);\n//       // const signer = provider.getSigner();\n//       const value = 0.01 // ether\n//       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\n//       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\n//       // console.log(\"Initialize payment\");\n//       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n//       // console.log(\"Mining... please wait\");\n//       // await nftTxn.wait();\n//       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n//     } else {\n//       console.log(\"Ethereum object does not exist\");\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\nfunction sendEth(fromAddress,toAddress,etherValue){var weiValue=etherValue*Math.pow(10,18);var weiValueHex=weiValue.toString(16);if(window.ethereum===undefined){console.log('[ethTip] sendEth called without window.ethereum object');return;}var params=[{to:toAddress,from:fromAddress,value:weiValueHex}];window.ethereum.request({method:'eth_sendTransaction',params:params}).then(function(result){console.log('[ethTip] User completed Tx: https://etherscan.io/tx/'+result);alert('Thanks for the eth! https://etherscan.io/tx/'+result);}).catch(function(error){console.log('[ethTip] '+error['message']);});}function connectAndSendEth(toAddress,etherValue){if(window.ethereum===undefined){console.log('[ethTip] connectAndSendEth called without window.ethereum object');return;}window.ethereum.request({method:'eth_requestAccounts'}).then(function(accounts){if(accounts.length>0){sendEth(accounts[0],toAddress,etherValue);}}).catch(function(error){console.log('[ethTip] Error: '+JSON.stringify(error));});}// const connectWalletButton = () => {\n//   return (\n//     <Button  \n//       className='btns'\n//       buttonStyle='btn--primary'\n//       buttonSize='btn--large'\n//       onClick={connectWalletHandler}\n//       >\n//       CONNECT WALLET\n//     </Button>\n//   )\n// }\nvar _useWeb3React=useWeb3React(),activate=_useWeb3React.activate,deactivate=_useWeb3React.deactivate;var mintNftButton=function mintNftButton(){return/*#__PURE__*/ (// <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//   Mint NFT\n// </button>\nReact.createElement(\"div\",{className:\"tip\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){activate(CoinbaseWallet);}},\"Coinbase Wallet\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){activate(WalletConnect);}},\"Wallet Connect\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){activate(Injected);}},\"Metamask\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:deactivate},\"Disconnect\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){connectAndSendEth(tipJar,0.02);}},\"Donate\")))));};return/*#__PURE__*/React.createElement(\"div\",{className:\"donate\"},mintNftButton());}","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/src/components/pages/Donate.js"],"names":["React","tipJar","Button","WalletLinkConnector","WalletConnectConnector","InjectedConnector","useWeb3React","CoinbaseWallet","url","process","env","INFURA_KEY","appName","supportedChainIds","WalletConnect","rpcUrl","bridge","qrcode","Injected","Donate","sendEth","fromAddress","toAddress","etherValue","weiValue","Math","pow","weiValueHex","toString","window","ethereum","undefined","console","log","params","to","from","value","request","method","then","result","alert","catch","error","connectAndSendEth","accounts","length","JSON","stringify","activate","deactivate","mintNftButton"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../App.css';\r\nimport { tipJar } from '../HeroSection';\r\nimport { Button } from '../Button';\r\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\r\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport const CoinbaseWallet = new WalletLinkConnector({\r\n url: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\r\n appName: \"Web3-react Demo\",\r\n supportedChainIds: [1, 3, 4, 5, 42],\r\n});\r\n\r\nexport const WalletConnect = new WalletConnectConnector({\r\n rpcUrl: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\r\n bridge: \"https://bridge.walletconnect.org\",\r\n qrcode: true,\r\n});\r\n\r\nexport const Injected = new InjectedConnector({\r\n supportedChainIds: [1, 3, 4, 5, 42]\r\n});\r\n\r\nexport default function Donate() {\r\n  // return <h1 className='donate'>LIKE & SUBSCRIBE</h1>;\r\n    \r\n  // const tipETH = async () => { \r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  \r\n  //     if (ethereum) {\r\n  //       // const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       // const signer = provider.getSigner();\r\n  //       const value = 0.01 // ether\r\n  //       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\r\n      \r\n  //       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n  //       // console.log(\"Initialize payment\");\r\n  //       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n  //       // console.log(\"Mining... please wait\");\r\n  //       // await nftTxn.wait();\r\n  \r\n  //       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n  //     } else {\r\n  //       console.log(\"Ethereum object does not exist\");\r\n  //     }\r\n  \r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  function sendEth(fromAddress, toAddress, etherValue) {\r\n    var weiValue = etherValue * Math.pow(10, 18);\r\n      var weiValueHex = weiValue.toString(16);\r\n      \r\n    if (window.ethereum === undefined) {\r\n          console.log('[ethTip] sendEth called without window.ethereum object');\r\n          return;\r\n      }\r\n  \r\n      var params = [{\r\n          to: toAddress,\r\n          from: fromAddress,\r\n          value: weiValueHex\r\n      }];\r\n      \r\n    window.ethereum.request({\r\n          method: 'eth_sendTransaction',\r\n          params: params\r\n      }) \r\n      .then((result) => {\r\n          console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\r\n      alert('Thanks for the eth! https://etherscan.io/tx/' + result);\r\n    })\r\n      .catch((error) => {\r\n          console.log('[ethTip] ' + error['message']);\r\n      });\r\n  }\r\n  \r\n  function connectAndSendEth(toAddress, etherValue) {\r\n      if (window.ethereum === undefined) {\r\n          console.log('[ethTip] connectAndSendEth called without window.ethereum object');\r\n          return;\r\n      }\r\n  \r\n      window.ethereum.request(\r\n          { method: 'eth_requestAccounts' }\r\n      )\r\n      .then((accounts) => {\r\n          if (accounts.length > 0) {\r\n              sendEth(accounts[0], toAddress, etherValue);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.log('[ethTip] Error: ' + JSON.stringify(error));\r\n      });\r\n  } \r\n  // const connectWalletButton = () => {\r\n  //   return (\r\n  //     <Button  \r\n  //       className='btns'\r\n  //       buttonStyle='btn--primary'\r\n  //       buttonSize='btn--large'\r\n  //       onClick={connectWalletHandler}\r\n  //       >\r\n  //       CONNECT WALLET\r\n  //     </Button>\r\n  //   )\r\n  // }\r\n  const { activate, deactivate} = useWeb3React();\r\n  const mintNftButton = () => {\r\n\r\n    return (\r\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n      //   Mint NFT\r\n      // </button>\r\n\r\n      <div className='tip'>\r\n        {/* <Button  \r\n          className='btns'\r\n          buttonStyle='btn--outline'\r\n          buttonSize='btn--large'\r\n          // onClick={mintNftHandler}\r\n          onClick={tipETH}\r\n          >\r\n          Send ETH\r\n        </Button> */}\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(CoinbaseWallet) }}\r\n          >\r\n            Coinbase Wallet\r\n          </Button>\r\n        </div>\r\n        <div>  \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(WalletConnect) }}\r\n          >\r\n            Wallet Connect\r\n          </Button>\r\n        </div>\r\n        <div>  \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(Injected) }}\r\n          >\r\n            Metamask\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={deactivate}\r\n          >\r\n            Disconnect\r\n          </Button>  \r\n        <div>   \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => {connectAndSendEth(tipJar, 0.02)}}\r\n          >\r\n            Donate\r\n            </Button> \r\n          </div> \r\n        </div>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n  return(\r\n    <div className='donate'>\r\n      {mintNftButton()}\r\n    </div>\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}