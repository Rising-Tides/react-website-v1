{"ast":null,"code":"const ProviderEngine = require(\"web3-provider-engine\");\n\nconst FiltersSubprovider = require('web3-provider-engine/subproviders/filters');\n\nconst WalletSubprovider = require('web3-provider-engine/subproviders/wallet');\n\nconst RpcSubprovider = require('web3-provider-engine/subproviders/rpc');\n\nconst EthereumjsWallet = require('ethereumjs-wallet');\n\nconst NonceSubprovider = require('web3-provider-engine/subproviders/nonce-tracker');\n\nfunction PrivateKeyProvider(privateKey, providerUrl) {\n  if (!privateKey) {\n    throw new Error(`Private Key missing, non-empty string expected, got \"${privateKey}\"`);\n  }\n\n  if (!providerUrl) {\n    throw new Error(`Provider URL missing, non-empty string expected, got \"${providerUrl}\"`);\n  }\n\n  this.wallet = EthereumjsWallet.fromPrivateKey(new Buffer(privateKey, \"hex\"));\n  this.address = \"0x\" + this.wallet.getAddress().toString(\"hex\");\n  this.engine = new ProviderEngine();\n  this.engine.addProvider(new FiltersSubprovider());\n  this.engine.addProvider(new NonceSubprovider());\n  this.engine.addProvider(new WalletSubprovider(this.wallet, {}));\n  this.engine.addProvider(new RpcSubprovider({\n    rpcUrl: providerUrl\n  }));\n  this.engine.start();\n}\n\nPrivateKeyProvider.prototype.sendAsync = function () {\n  this.engine.sendAsync.apply(this.engine, arguments);\n};\n\nPrivateKeyProvider.prototype.send = function () {\n  return this.engine.send.apply(this.engine, arguments);\n};\n\nmodule.exports = PrivateKeyProvider;","map":{"version":3,"sources":["/Users/scotteinsidler/Documents/GitHub/react-website-v1/node_modules/truffle-privatekey-provider/index.js"],"names":["ProviderEngine","require","FiltersSubprovider","WalletSubprovider","RpcSubprovider","EthereumjsWallet","NonceSubprovider","PrivateKeyProvider","privateKey","providerUrl","Error","wallet","fromPrivateKey","Buffer","address","getAddress","toString","engine","addProvider","rpcUrl","start","prototype","sendAsync","apply","arguments","send","module","exports"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA9B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,2CAAD,CAAlC;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,0CAAD,CAAjC;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,uCAAD,CAA9B;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,mBAAD,CAAhC;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,iDAAD,CAAhC;;AAEA,SAASM,kBAAT,CAA4BC,UAA5B,EAAwCC,WAAxC,EAAqD;AACnD,MAAI,CAACD,UAAL,EAAiB;AACf,UAAM,IAAIE,KAAJ,CAAW,wDAAuDF,UAAW,GAA7E,CAAN;AACD;;AAED,MAAI,CAACC,WAAL,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAW,yDAAwDD,WAAY,GAA/E,CAAN;AACD;;AAED,OAAKE,MAAL,GAAcN,gBAAgB,CAACO,cAAjB,CAAgC,IAAIC,MAAJ,CAAWL,UAAX,EAAuB,KAAvB,CAAhC,CAAd;AACA,OAAKM,OAAL,GAAe,OAAO,KAAKH,MAAL,CAAYI,UAAZ,GAAyBC,QAAzB,CAAkC,KAAlC,CAAtB;AAEA,OAAKC,MAAL,GAAc,IAAIjB,cAAJ,EAAd;AAEA,OAAKiB,MAAL,CAAYC,WAAZ,CAAwB,IAAIhB,kBAAJ,EAAxB;AACA,OAAKe,MAAL,CAAYC,WAAZ,CAAwB,IAAIZ,gBAAJ,EAAxB;AACA,OAAKW,MAAL,CAAYC,WAAZ,CAAwB,IAAIf,iBAAJ,CAAsB,KAAKQ,MAA3B,EAAmC,EAAnC,CAAxB;AACA,OAAKM,MAAL,CAAYC,WAAZ,CAAwB,IAAId,cAAJ,CAAmB;AAAEe,IAAAA,MAAM,EAAEV;AAAV,GAAnB,CAAxB;AAEA,OAAKQ,MAAL,CAAYG,KAAZ;AACD;;AAEDb,kBAAkB,CAACc,SAAnB,CAA6BC,SAA7B,GAAyC,YAAW;AAClD,OAAKL,MAAL,CAAYK,SAAZ,CAAsBC,KAAtB,CAA4B,KAAKN,MAAjC,EAAyCO,SAAzC;AACD,CAFD;;AAIAjB,kBAAkB,CAACc,SAAnB,CAA6BI,IAA7B,GAAoC,YAAW;AAC7C,SAAO,KAAKR,MAAL,CAAYQ,IAAZ,CAAiBF,KAAjB,CAAuB,KAAKN,MAA5B,EAAoCO,SAApC,CAAP;AACD,CAFD;;AAKAE,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourcesContent":["const ProviderEngine = require(\"web3-provider-engine\");\nconst FiltersSubprovider = require('web3-provider-engine/subproviders/filters');\nconst WalletSubprovider = require('web3-provider-engine/subproviders/wallet');\nconst RpcSubprovider = require('web3-provider-engine/subproviders/rpc');\nconst EthereumjsWallet = require('ethereumjs-wallet');\nconst NonceSubprovider = require('web3-provider-engine/subproviders/nonce-tracker');\n\nfunction PrivateKeyProvider(privateKey, providerUrl) {\n  if (!privateKey) {\n    throw new Error(`Private Key missing, non-empty string expected, got \"${privateKey}\"`);\n  }\n\n  if (!providerUrl) {\n    throw new Error(`Provider URL missing, non-empty string expected, got \"${providerUrl}\"`);\n  }\n\n  this.wallet = EthereumjsWallet.fromPrivateKey(new Buffer(privateKey, \"hex\"));\n  this.address = \"0x\" + this.wallet.getAddress().toString(\"hex\");\n\n  this.engine = new ProviderEngine();\n\n  this.engine.addProvider(new FiltersSubprovider());\n  this.engine.addProvider(new NonceSubprovider());\n  this.engine.addProvider(new WalletSubprovider(this.wallet, {}));\n  this.engine.addProvider(new RpcSubprovider({ rpcUrl: providerUrl }));\n\n  this.engine.start();\n}\n\nPrivateKeyProvider.prototype.sendAsync = function() {\n  this.engine.sendAsync.apply(this.engine, arguments);\n};\n\nPrivateKeyProvider.prototype.send = function() {\n  return this.engine.send.apply(this.engine, arguments);\n};\n\n\nmodule.exports = PrivateKeyProvider;\n"]},"metadata":{},"sourceType":"script"}