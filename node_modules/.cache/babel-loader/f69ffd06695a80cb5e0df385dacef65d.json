{"ast":null,"code":"var _jsxFileName = \"/Users/scotteinsidler/Documents/GitHub/react-website-v1/src/components/HeroSection.js\";\nimport React from 'react';\nimport '../App.css';\nimport { Button } from './Button';\nimport './HeroSection.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport ethSend from 'eth-send';\nimport Web3 from 'web3';\nimport BigNumber from \"bignumber.js\";\nconst web3 = new Web3(window.web3.currentProvider);\nconst ETHER = new BigNumber(\"1000000000000000000\"); // import { ethers } from 'ethers';\n// import contract from '../contracts/NFTCollectible.json';\n\nexport const tipJar = \"0x8DAA10845A8144469da192ef18b13bCdFBb73591\";\nexport const contractAddress = \"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\"; // const abi = contract.abi;\n\nfunction HeroSection() {\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window; // if (!ethereum) {\n    //   console.log(\"Make sure you have Metamask installed!\");\n    //   return;\n    // } else {\n    //   console.log(\"Wallet exists! We're ready to go!\")\n    // }\n\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      }); // If the event is not dispatched by the end of the timeout,\n      // the user probably doesn't have MetaMask installed.\n\n      setTimeout(handleEthereum, 3000); // 3 seconds\n    }\n\n    function handleEthereum() {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum && ethereum.isMetaMask) {\n        console.log('Ethereum successfully detected!'); // Access the decentralized web!\n      } else {\n        console.log('Please install MetaMask  ');\n      }\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask\");\n      window.location.replace(\"https://metamask.io/download/\");\n    }\n\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // const mintNftHandler = async () => { \n  //   try {\n  //     const { ethereum } = window;\n  //     if (ethereum) {\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const nftContract = new ethers.Contract(contractAddress, abi, signer);\n  //       console.log(\"Initialize payment\");\n  //       let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  //       console.log(\"Mining... please wait\");\n  //       await nftTxn.wait();\n  //       console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  //     } else {\n  //       console.log(\"Ethereum object does not exist\");\n  //     }\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n\n\n  const tipETH = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // const provider = new ethers.providers.Web3Provider(ethereum);\n        // const signer = provider.getSigner();\n        const value = 0.01; // ether\n        // window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`,'payment','width=500, height=800');\n        // const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        ethSend(web3, tipJar, ['0x', new BigNumber('0.1').times(ETHER).floor().toString(16)].join(''), {\n          gas: '21000',\n          gasPrice: '1000000000',\n          data: 'Donation!'\n        }); // console.log(\"Initialize payment\");\n        // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n        // console.log(\"Mining... please wait\");\n        // await nftTxn.wait();\n        // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return /*#__PURE__*/React.createElement(Button, {\n      className: \"btns\",\n      buttonStyle: \"btn--primary\",\n      buttonSize: \"btn--large\",\n      onClick: connectWalletHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, \"CONNECT WALLET\");\n  };\n\n  const mintNftButton = () => {\n    return (\n      /*#__PURE__*/\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n      //   Mint NFT\n      // </button>\n      React.createElement(Button, {\n        className: \"btns\",\n        buttonStyle: \"btn--outline\",\n        buttonSize: \"btn--large\" // onClick={mintNftHandler}\n        ,\n        onClick: tipETH,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 7\n        }\n      }, \"Send Tip\")\n    );\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hero-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, \"ADVENTURE AWAITS\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, \"What are you waiting for?\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hero-btns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, currentAccount ? mintNftButton() : connectWalletButton()));\n}\n\nexport default HeroSection;","map":{"version":3,"sources":["/Users/scotteinsidler/Documents/GitHub/react-website-v1/src/components/HeroSection.js"],"names":["React","Button","useEffect","useState","ethSend","Web3","BigNumber","web3","window","currentProvider","ETHER","tipJar","contractAddress","HeroSection","currentAccount","setCurrentAccount","checkWalletIsConnected","ethereum","handleEthereum","addEventListener","once","setTimeout","isMetaMask","console","log","accounts","request","method","length","account","connectWalletHandler","alert","location","replace","err","tipETH","value","times","floor","toString","join","gas","gasPrice","data","connectWalletButton","mintNftButton"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport { Button } from './Button';\nimport './HeroSection.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport ethSend from 'eth-send';\nimport Web3 from 'web3';\nimport BigNumber from \"bignumber.js\";\nconst web3 = new Web3(window.web3.currentProvider);\nconst ETHER = new BigNumber(\"1000000000000000000\");\n// import { ethers } from 'ethers';\n// import contract from '../contracts/NFTCollectible.json';\n\nexport const tipJar = \"0x8DAA10845A8144469da192ef18b13bCdFBb73591\";\nexport const contractAddress = \"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\";\n// const abi = contract.abi;\n\n\nfunction HeroSection() {\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => { \n    const { ethereum } = window;\n  \n    // if (!ethereum) {\n    //   console.log(\"Make sure you have Metamask installed!\");\n    //   return;\n    // } else {\n    //   console.log(\"Wallet exists! We're ready to go!\")\n    // }\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true,\n      });\n    \n      // If the event is not dispatched by the end of the timeout,\n      // the user probably doesn't have MetaMask installed.\n      setTimeout(handleEthereum, 3000); // 3 seconds\n    }\n    \n    function handleEthereum() {\n      const { ethereum } = window;\n      if (ethereum && ethereum.isMetaMask) {\n        console.log('Ethereum successfully detected!');\n        // Access the decentralized web!\n      } else {\n        console.log('Please install MetaMask  ');\n      }\n    }\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n  \n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account); \n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n  \n  const connectWalletHandler = async () => { \n    const { ethereum } = window;\n  \n    if (!ethereum) {\n       alert(\"Please install Metamask\");\n      window.location.replace(\"https://metamask.io/download/\");\n    }\n  \n    try {\n      const accounts = await ethereum.request({method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n  \n  // const mintNftHandler = async () => { \n  //   try {\n  //     const { ethereum } = window;\n  \n  //     if (ethereum) {\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const nftContract = new ethers.Contract(contractAddress, abi, signer);\n  \n  //       console.log(\"Initialize payment\");\n  //       let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  \n  //       console.log(\"Mining... please wait\");\n  //       await nftTxn.wait();\n  \n  //       console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  \n  //     } else {\n  //       console.log(\"Ethereum object does not exist\");\n  //     }\n  \n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n  \n  const tipETH = async () => { \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        // const provider = new ethers.providers.Web3Provider(ethereum);\n        // const signer = provider.getSigner();\n        const value = 0.01 // ether\n        // window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`,'payment','width=500, height=800');\n      \n        // const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        ethSend(\n          web3,\n          tipJar,\n          ['0x', new BigNumber('0.1').times(ETHER).floor().toString(16)].join(''),\n          {\n            gas: '21000',\n            gasPrice: '1000000000',\n            data: 'Donation!'\n          }\n        );  \n        // console.log(\"Initialize payment\");\n        // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n  \n        // console.log(\"Mining... please wait\");\n        // await nftTxn.wait();\n  \n        // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n  \n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n  \n    } catch (err) {\n      console.log(err);\n    }\n  }\n  \n  const connectWalletButton = () => {\n    return (\n      <Button  \n        className='btns'\n        buttonStyle='btn--primary'\n        buttonSize='btn--large'\n        onClick={connectWalletHandler}\n        >\n        CONNECT WALLET\n      </Button>\n    )\n  }\n  \n  const mintNftButton = () => {\n    return (\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n      //   Mint NFT\n      // </button>\n      <Button  \n        className='btns'\n        buttonStyle='btn--outline'\n        buttonSize='btn--large'\n        // onClick={mintNftHandler}\n        onClick={tipETH}\n        >\n        Send Tip\n      </Button>\n    )\n  }\n  \n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])  \n  return (\n    <div className='hero-container'>\n      {/* <video src='/videos/video-2.mp4' autoPlay loop muted /> */}\n      {/* <img src='/images/IMG_1.jpg'>''</img> */}\n      <h1>ADVENTURE AWAITS</h1>\n      <p>What are you waiting for?</p>\n      <div className='hero-btns'>\n        {/* <Button\n          className='btns'\n          buttonStyle='btn--outline'\n          buttonSize='btn--large'\n        >\n          GET STARTED\n        </Button>\n        <Button\n          className='btns'\n          buttonStyle='btn--primary'\n          buttonSize='btn--large'\n          onClick={console.log('hey')}\n        >\n          WATCH TRAILER <i className='far fa-play-circle' />\n        </Button> */}\n      </div>\n      <div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>      \n    </div>\n  );\n}\n\nexport default HeroSection;\n\n"]},"metadata":{},"sourceType":"module"}