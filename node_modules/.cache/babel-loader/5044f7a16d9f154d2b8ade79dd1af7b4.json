{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  } // These *are* the droids we're looking for.\n\n\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  } // Spelunk further...\n\n\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  } // Might be a JSON string we can further descend...\n\n\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n\n  return null;\n}\n\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction; // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n\n    if (result) {\n      return result.data;\n    } // Nothing descriptive..\n\n\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n\n    if (result == null) {\n      result = spelunk(error, false);\n    } // Found \"reverted\", this is a CALL_EXCEPTION\n\n\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  } // @TODO: Should we spelunk for message too?\n\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase(); // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n\n        const address = yield this.provider.resolveName(to);\n\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n\n        return address;\n      }));\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval); // Send the transaction\n\n      const hash = yield this.sendUncheckedTransaction(transaction);\n\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n    });\n  }\n\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress(); // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n\n      return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n    });\n  }\n\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    this._nextId = 42;\n  }\n\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n\n    return this._eventLoopCache;\n  }\n\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n\n    return this._cache[\"detectNetwork\"];\n  }\n\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    }); // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    }); // Cache the fetch, but clear it on the next event loop\n\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n\n      const args = this.prepareRequest(method, params);\n\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(BigNumber.from(transaction[key]));\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","requireData","message","match","data","key","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","action","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Signer } from \"@ethersproject/abstract-signer\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\r\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\r\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\r\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\r\nimport { accessListify } from \"@ethersproject/transactions\";\r\nimport { fetchJson, poll } from \"@ethersproject/web\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nimport { BaseProvider } from \"./base-provider\";\r\nconst errorGas = [\"call\", \"estimateGas\"];\r\nfunction spelunk(value, requireData) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    // These *are* the droids we're looking for.\r\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\r\n        const data = isHexString(value.data) ? value.data : null;\r\n        if (!requireData || data) {\r\n            return { message: value.message, data };\r\n        }\r\n    }\r\n    // Spelunk further...\r\n    if (typeof (value) === \"object\") {\r\n        for (const key in value) {\r\n            const result = spelunk(value[key], requireData);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // Might be a JSON string we can further descend...\r\n    if (typeof (value) === \"string\") {\r\n        try {\r\n            return spelunk(JSON.parse(value), requireData);\r\n        }\r\n        catch (error) { }\r\n    }\r\n    return null;\r\n}\r\nfunction checkError(method, error, params) {\r\n    const transaction = params.transaction || params.signedTransaction;\r\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\r\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\r\n    if (method === \"call\") {\r\n        const result = spelunk(error, true);\r\n        if (result) {\r\n            return result.data;\r\n        }\r\n        // Nothing descriptive..\r\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\r\n            data: \"0x\", transaction, error\r\n        });\r\n    }\r\n    if (method === \"estimateGas\") {\r\n        // Try to find something, with a preference on SERVER_ERROR body\r\n        let result = spelunk(error.body, false);\r\n        if (result == null) {\r\n            result = spelunk(error, false);\r\n        }\r\n        // Found \"reverted\", this is a CALL_EXCEPTION\r\n        if (result) {\r\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\r\n                reason: result.message, method, transaction, error\r\n            });\r\n        }\r\n    }\r\n    // @TODO: Should we spelunk for message too?\r\n    let message = error.message;\r\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\r\n        message = error.error.message;\r\n    }\r\n    else if (typeof (error.body) === \"string\") {\r\n        message = error.body;\r\n    }\r\n    else if (typeof (error.responseText) === \"string\") {\r\n        message = error.responseText;\r\n    }\r\n    message = (message || \"\").toLowerCase();\r\n    // \"insufficient funds for gas * price + value + cost(data)\"\r\n    if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\r\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\r\n            error, method, transaction\r\n        });\r\n    }\r\n    // \"nonce too low\"\r\n    if (message.match(/nonce (is )?too low/i)) {\r\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\r\n            error, method, transaction\r\n        });\r\n    }\r\n    // \"replacement transaction underpriced\"\r\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\r\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\r\n            error, method, transaction\r\n        });\r\n    }\r\n    // \"replacement transaction underpriced\"\r\n    if (message.match(/only replay-protected/i)) {\r\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            error, method, transaction\r\n        });\r\n    }\r\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\r\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\r\n            error, method, transaction\r\n        });\r\n    }\r\n    throw error;\r\n}\r\nfunction timer(timeout) {\r\n    return new Promise(function (resolve) {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\nfunction getResult(payload) {\r\n    if (payload.error) {\r\n        // @TODO: not any\r\n        const error = new Error(payload.error.message);\r\n        error.code = payload.error.code;\r\n        error.data = payload.error.data;\r\n        throw error;\r\n    }\r\n    return payload.result;\r\n}\r\nfunction getLowerCase(value) {\r\n    if (value) {\r\n        return value.toLowerCase();\r\n    }\r\n    return value;\r\n}\r\nconst _constructorGuard = {};\r\nexport class JsonRpcSigner extends Signer {\r\n    constructor(constructorGuard, provider, addressOrIndex) {\r\n        super();\r\n        if (constructorGuard !== _constructorGuard) {\r\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\r\n        }\r\n        defineReadOnly(this, \"provider\", provider);\r\n        if (addressOrIndex == null) {\r\n            addressOrIndex = 0;\r\n        }\r\n        if (typeof (addressOrIndex) === \"string\") {\r\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\r\n            defineReadOnly(this, \"_index\", null);\r\n        }\r\n        else if (typeof (addressOrIndex) === \"number\") {\r\n            defineReadOnly(this, \"_index\", addressOrIndex);\r\n            defineReadOnly(this, \"_address\", null);\r\n        }\r\n        else {\r\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\r\n        }\r\n    }\r\n    connect(provider) {\r\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"connect\"\r\n        });\r\n    }\r\n    connectUnchecked() {\r\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\r\n    }\r\n    getAddress() {\r\n        if (this._address) {\r\n            return Promise.resolve(this._address);\r\n        }\r\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\r\n            if (accounts.length <= this._index) {\r\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\r\n                    operation: \"getAddress\"\r\n                });\r\n            }\r\n            return this.provider.formatter.address(accounts[this._index]);\r\n        });\r\n    }\r\n    sendUncheckedTransaction(transaction) {\r\n        transaction = shallowCopy(transaction);\r\n        const fromAddress = this.getAddress().then((address) => {\r\n            if (address) {\r\n                address = address.toLowerCase();\r\n            }\r\n            return address;\r\n        });\r\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\r\n        // wishes to use this, it is easy to specify explicitly, otherwise\r\n        // we look it up for them.\r\n        if (transaction.gasLimit == null) {\r\n            const estimate = shallowCopy(transaction);\r\n            estimate.from = fromAddress;\r\n            transaction.gasLimit = this.provider.estimateGas(estimate);\r\n        }\r\n        if (transaction.to != null) {\r\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {\r\n                if (to == null) {\r\n                    return null;\r\n                }\r\n                const address = yield this.provider.resolveName(to);\r\n                if (address == null) {\r\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\r\n                }\r\n                return address;\r\n            }));\r\n        }\r\n        return resolveProperties({\r\n            tx: resolveProperties(transaction),\r\n            sender: fromAddress\r\n        }).then(({ tx, sender }) => {\r\n            if (tx.from != null) {\r\n                if (tx.from.toLowerCase() !== sender) {\r\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\r\n                }\r\n            }\r\n            else {\r\n                tx.from = sender;\r\n            }\r\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\r\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\r\n                return hash;\r\n            }, (error) => {\r\n                return checkError(\"sendTransaction\", error, hexTx);\r\n            });\r\n        });\r\n    }\r\n    signTransaction(transaction) {\r\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"signTransaction\"\r\n        });\r\n    }\r\n    sendTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // This cannot be mined any earlier than any recent block\r\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\r\n            // Send the transaction\r\n            const hash = yield this.sendUncheckedTransaction(transaction);\r\n            try {\r\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\r\n                // for a response, and we need the actual transaction, so we poll\r\n                // for it; it should show up very quickly\r\n                return yield poll(() => __awaiter(this, void 0, void 0, function* () {\r\n                    const tx = yield this.provider.getTransaction(hash);\r\n                    if (tx === null) {\r\n                        return undefined;\r\n                    }\r\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\r\n                }), { oncePoll: this.provider });\r\n            }\r\n            catch (error) {\r\n                error.transactionHash = hash;\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signMessage(message) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\r\n            const address = yield this.getAddress();\r\n            return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\r\n        });\r\n    }\r\n    _legacySignMessage(message) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\r\n            const address = yield this.getAddress();\r\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\r\n            return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\r\n        });\r\n    }\r\n    _signTypedData(domain, types, value) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Populate any ENS names (in-place)\r\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\r\n                return this.provider.resolveName(name);\r\n            });\r\n            const address = yield this.getAddress();\r\n            return yield this.provider.send(\"eth_signTypedData_v4\", [\r\n                address.toLowerCase(),\r\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\r\n            ]);\r\n        });\r\n    }\r\n    unlock(password) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const provider = this.provider;\r\n            const address = yield this.getAddress();\r\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\r\n        });\r\n    }\r\n}\r\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\r\n    sendTransaction(transaction) {\r\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\r\n            return {\r\n                hash: hash,\r\n                nonce: null,\r\n                gasLimit: null,\r\n                gasPrice: null,\r\n                data: null,\r\n                value: null,\r\n                chainId: null,\r\n                confirmations: 0,\r\n                from: null,\r\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\r\n            };\r\n        });\r\n    }\r\n}\r\nconst allowedTransactionKeys = {\r\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\r\n    type: true, accessList: true,\r\n    maxFeePerGas: true, maxPriorityFeePerGas: true\r\n};\r\nexport class JsonRpcProvider extends BaseProvider {\r\n    constructor(url, network) {\r\n        let networkOrReady = network;\r\n        // The network is unknown, query the JSON-RPC for it\r\n        if (networkOrReady == null) {\r\n            networkOrReady = new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    this.detectNetwork().then((network) => {\r\n                        resolve(network);\r\n                    }, (error) => {\r\n                        reject(error);\r\n                    });\r\n                }, 0);\r\n            });\r\n        }\r\n        super(networkOrReady);\r\n        // Default URL\r\n        if (!url) {\r\n            url = getStatic(this.constructor, \"defaultUrl\")();\r\n        }\r\n        if (typeof (url) === \"string\") {\r\n            defineReadOnly(this, \"connection\", Object.freeze({\r\n                url: url\r\n            }));\r\n        }\r\n        else {\r\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\r\n        }\r\n        this._nextId = 42;\r\n    }\r\n    get _cache() {\r\n        if (this._eventLoopCache == null) {\r\n            this._eventLoopCache = {};\r\n        }\r\n        return this._eventLoopCache;\r\n    }\r\n    static defaultUrl() {\r\n        return \"http:/\\/localhost:8545\";\r\n    }\r\n    detectNetwork() {\r\n        if (!this._cache[\"detectNetwork\"]) {\r\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\r\n            // Clear this cache at the beginning of the next event loop\r\n            setTimeout(() => {\r\n                this._cache[\"detectNetwork\"] = null;\r\n            }, 0);\r\n        }\r\n        return this._cache[\"detectNetwork\"];\r\n    }\r\n    _uncachedDetectNetwork() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield timer(0);\r\n            let chainId = null;\r\n            try {\r\n                chainId = yield this.send(\"eth_chainId\", []);\r\n            }\r\n            catch (error) {\r\n                try {\r\n                    chainId = yield this.send(\"net_version\", []);\r\n                }\r\n                catch (error) { }\r\n            }\r\n            if (chainId != null) {\r\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\r\n                try {\r\n                    return getNetwork(BigNumber.from(chainId).toNumber());\r\n                }\r\n                catch (error) {\r\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\r\n                        chainId: chainId,\r\n                        event: \"invalidNetwork\",\r\n                        serverError: error\r\n                    });\r\n                }\r\n            }\r\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\r\n                event: \"noNetwork\"\r\n            });\r\n        });\r\n    }\r\n    getSigner(addressOrIndex) {\r\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\r\n    }\r\n    getUncheckedSigner(addressOrIndex) {\r\n        return this.getSigner(addressOrIndex).connectUnchecked();\r\n    }\r\n    listAccounts() {\r\n        return this.send(\"eth_accounts\", []).then((accounts) => {\r\n            return accounts.map((a) => this.formatter.address(a));\r\n        });\r\n    }\r\n    send(method, params) {\r\n        const request = {\r\n            method: method,\r\n            params: params,\r\n            id: (this._nextId++),\r\n            jsonrpc: \"2.0\"\r\n        };\r\n        this.emit(\"debug\", {\r\n            action: \"request\",\r\n            request: deepCopy(request),\r\n            provider: this\r\n        });\r\n        // We can expand this in the future to any call, but for now these\r\n        // are the biggest wins and do not require any serializing parameters.\r\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\r\n        if (cache && this._cache[method]) {\r\n            return this._cache[method];\r\n        }\r\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\r\n            this.emit(\"debug\", {\r\n                action: \"response\",\r\n                request: request,\r\n                response: result,\r\n                provider: this\r\n            });\r\n            return result;\r\n        }, (error) => {\r\n            this.emit(\"debug\", {\r\n                action: \"response\",\r\n                error: error,\r\n                request: request,\r\n                provider: this\r\n            });\r\n            throw error;\r\n        });\r\n        // Cache the fetch, but clear it on the next event loop\r\n        if (cache) {\r\n            this._cache[method] = result;\r\n            setTimeout(() => {\r\n                this._cache[method] = null;\r\n            }, 0);\r\n        }\r\n        return result;\r\n    }\r\n    prepareRequest(method, params) {\r\n        switch (method) {\r\n            case \"getBlockNumber\":\r\n                return [\"eth_blockNumber\", []];\r\n            case \"getGasPrice\":\r\n                return [\"eth_gasPrice\", []];\r\n            case \"getBalance\":\r\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\r\n            case \"getTransactionCount\":\r\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\r\n            case \"getCode\":\r\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\r\n            case \"getStorageAt\":\r\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\r\n            case \"sendTransaction\":\r\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\r\n            case \"getBlock\":\r\n                if (params.blockTag) {\r\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\r\n                }\r\n                else if (params.blockHash) {\r\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\r\n                }\r\n                return null;\r\n            case \"getTransaction\":\r\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\r\n            case \"getTransactionReceipt\":\r\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\r\n            case \"call\": {\r\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\r\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\r\n            }\r\n            case \"estimateGas\": {\r\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\r\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\r\n            }\r\n            case \"getLogs\":\r\n                if (params.filter && params.filter.address != null) {\r\n                    params.filter.address = getLowerCase(params.filter.address);\r\n                }\r\n                return [\"eth_getLogs\", [params.filter]];\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n    perform(method, params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Legacy networks do not like the type field being passed along (which\r\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\r\n            if (method === \"call\" || method === \"estimateGas\") {\r\n                const tx = params.transaction;\r\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\r\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\r\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\r\n                        const feeData = yield this.getFeeData();\r\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\r\n                            // Network doesn't know about EIP-1559 (and hence type)\r\n                            params = shallowCopy(params);\r\n                            params.transaction = shallowCopy(tx);\r\n                            delete params.transaction.type;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const args = this.prepareRequest(method, params);\r\n            if (args == null) {\r\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\r\n            }\r\n            try {\r\n                return yield this.send(args[0], args[1]);\r\n            }\r\n            catch (error) {\r\n                return checkError(method, error, params);\r\n            }\r\n        });\r\n    }\r\n    _startEvent(event) {\r\n        if (event.tag === \"pending\") {\r\n            this._startPending();\r\n        }\r\n        super._startEvent(event);\r\n    }\r\n    _startPending() {\r\n        if (this._pendingFilter != null) {\r\n            return;\r\n        }\r\n        const self = this;\r\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\r\n        this._pendingFilter = pendingFilter;\r\n        pendingFilter.then(function (filterId) {\r\n            function poll() {\r\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\r\n                    if (self._pendingFilter != pendingFilter) {\r\n                        return null;\r\n                    }\r\n                    let seq = Promise.resolve();\r\n                    hashes.forEach(function (hash) {\r\n                        // @TODO: This should be garbage collected at some point... How? When?\r\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\r\n                        seq = seq.then(function () {\r\n                            return self.getTransaction(hash).then(function (tx) {\r\n                                self.emit(\"pending\", tx);\r\n                                return null;\r\n                            });\r\n                        });\r\n                    });\r\n                    return seq.then(function () {\r\n                        return timer(1000);\r\n                    });\r\n                }).then(function () {\r\n                    if (self._pendingFilter != pendingFilter) {\r\n                        self.send(\"eth_uninstallFilter\", [filterId]);\r\n                        return;\r\n                    }\r\n                    setTimeout(function () { poll(); }, 0);\r\n                    return null;\r\n                }).catch((error) => { });\r\n            }\r\n            poll();\r\n            return filterId;\r\n        }).catch((error) => { });\r\n    }\r\n    _stopEvent(event) {\r\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\r\n            this._pendingFilter = null;\r\n        }\r\n        super._stopEvent(event);\r\n    }\r\n    // Convert an ethers.js transaction into a JSON-RPC transaction\r\n    //  - gasLimit => gas\r\n    //  - All values hexlified\r\n    //  - All numeric values zero-striped\r\n    //  - All addresses are lowercased\r\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\r\n    //       before this is called\r\n    // @TODO: This will likely be removed in future versions and prepareRequest\r\n    //        will be the preferred method for this.\r\n    static hexlifyTransaction(transaction, allowExtra) {\r\n        // Check only allowed properties are given\r\n        const allowed = shallowCopy(allowedTransactionKeys);\r\n        if (allowExtra) {\r\n            for (const key in allowExtra) {\r\n                if (allowExtra[key]) {\r\n                    allowed[key] = true;\r\n                }\r\n            }\r\n        }\r\n        checkProperties(transaction, allowed);\r\n        const result = {};\r\n        // JSON-RPC now requires numeric values to be \"quantity\" values\r\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\r\n            if (transaction[key] == null) {\r\n                return;\r\n            }\r\n            const value = hexValue(BigNumber.from(transaction[key]));\r\n            if (key === \"gasLimit\") {\r\n                key = \"gas\";\r\n            }\r\n            result[key] = value;\r\n        });\r\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\r\n            if (transaction[key] == null) {\r\n                return;\r\n            }\r\n            result[key] = hexlify(transaction[key]);\r\n        });\r\n        if (transaction.accessList) {\r\n            result[\"accessList\"] = accessListify(transaction.accessList);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n//# sourceMappingURL=json-rpc-provider.js.map"]},"metadata":{},"sourceType":"module"}