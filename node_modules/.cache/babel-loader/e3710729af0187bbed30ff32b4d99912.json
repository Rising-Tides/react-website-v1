{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    this.formats = this.getDefaultFormats();\n  }\n\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const type = this.type.bind(this);\n\n    const strictData = v => {\n      return this.data(v, true);\n    };\n\n    formats.transaction = {\n      hash: hash,\n      type: type,\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n      // must be set\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData),\n      type: Formatter.allowNull(number),\n      accessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      effectiveGasPrice: Formatter.allowNull(bigNumber),\n      status: Formatter.allowNull(number),\n      type: type\n    };\n    formats.block = {\n      hash: Formatter.allowNull(hash),\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: Formatter.allowNull(address),\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      baseFeePerGas: Formatter.allowNull(bigNumber)\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n\n  accessList(accessList) {\n    return accessListify(accessList || []);\n  } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n\n\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  }\n\n  type(number) {\n    if (number === \"0x\" || number == null) {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  } // Strict! Used on input.\n\n\n  bigNumber(value) {\n    return BigNumber.from(value);\n  } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n    }\n\n    throw new Error(\"invalid boolean - \" + value);\n  }\n\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n\n  data(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n\n    return result;\n  } // Requires an address\n  // Strict! Used on input.\n\n\n  address(value) {\n    return getAddress(value);\n  }\n\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n\n  contractAddress(value) {\n    return getContractAddress(value);\n  } // Strict! Used on input.\n\n\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n\n    if (blockTag === \"latest\" || blockTag === \"pending\") {\n      return blockTag;\n    }\n\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n\n    throw new Error(\"invalid blockTag\");\n  } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    return result;\n  } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n\n    const v = BigNumber.from(value);\n\n    try {\n      return v.toNumber();\n    } catch (error) {}\n\n    return null;\n  }\n\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n\n    return hexZeroPad(value, 32);\n  }\n\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    } // The difficulty may need to come from _difficulty in recursed blocks\n\n\n    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n    const result = Formatter.check(format, value);\n    result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n    return result;\n  }\n\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  } // Strict! Used on input.\n\n\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    } // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n\n\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    } // Rename input to data\n\n\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    } // If to and creates are empty, populate the creates from the transaction\n\n\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    }\n\n    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n      transaction.accessList = [];\n    }\n\n    const result = Formatter.check(this.formats.transaction, transaction);\n\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId; // geth-etc returns chainId\n\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n\n        if (chainId < 0) {\n          chainId = 0;\n        }\n\n        chainId = parseInt(chainId);\n      }\n\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n\n      result.chainId = chainId;\n    } // 0x0000... should actually be null\n\n\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n\n    return result;\n  }\n\n  transaction(value) {\n    return parseTransaction(value);\n  }\n\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n\n    return result;\n  }\n\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n\n    return null;\n  }\n\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n\n  static check(format, object) {\n    const result = {};\n\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n\n    return result;\n  } // if value is null-ish, nullValue is returned\n\n\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n\n      return format(value);\n    };\n  } // If value is false-ish, replaceValue is returned\n\n\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n\n      return format(value);\n    };\n  } // Requires an Array satisfying check\n\n\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n} // Show the throttle message only once\n\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/node_modules/@ethersproject/providers/lib.esm/formatter.js"],"names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","Formatter","constructor","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","v","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","callAddress","error","_block","format","author","_difficulty","check","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"mappings":"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","sourcesContent":["\"use strict\";\r\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\r\nimport { AddressZero } from \"@ethersproject/constants\";\r\nimport { shallowCopy } from \"@ethersproject/properties\";\r\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nexport class Formatter {\r\n    constructor() {\r\n        this.formats = this.getDefaultFormats();\r\n    }\r\n    getDefaultFormats() {\r\n        const formats = ({});\r\n        const address = this.address.bind(this);\r\n        const bigNumber = this.bigNumber.bind(this);\r\n        const blockTag = this.blockTag.bind(this);\r\n        const data = this.data.bind(this);\r\n        const hash = this.hash.bind(this);\r\n        const hex = this.hex.bind(this);\r\n        const number = this.number.bind(this);\r\n        const type = this.type.bind(this);\r\n        const strictData = (v) => { return this.data(v, true); };\r\n        formats.transaction = {\r\n            hash: hash,\r\n            type: type,\r\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\r\n            blockHash: Formatter.allowNull(hash, null),\r\n            blockNumber: Formatter.allowNull(number, null),\r\n            transactionIndex: Formatter.allowNull(number, null),\r\n            confirmations: Formatter.allowNull(number, null),\r\n            from: address,\r\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\r\n            // must be set\r\n            gasPrice: Formatter.allowNull(bigNumber),\r\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\r\n            maxFeePerGas: Formatter.allowNull(bigNumber),\r\n            gasLimit: bigNumber,\r\n            to: Formatter.allowNull(address, null),\r\n            value: bigNumber,\r\n            nonce: number,\r\n            data: data,\r\n            r: Formatter.allowNull(this.uint256),\r\n            s: Formatter.allowNull(this.uint256),\r\n            v: Formatter.allowNull(number),\r\n            creates: Formatter.allowNull(address, null),\r\n            raw: Formatter.allowNull(data),\r\n        };\r\n        formats.transactionRequest = {\r\n            from: Formatter.allowNull(address),\r\n            nonce: Formatter.allowNull(number),\r\n            gasLimit: Formatter.allowNull(bigNumber),\r\n            gasPrice: Formatter.allowNull(bigNumber),\r\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\r\n            maxFeePerGas: Formatter.allowNull(bigNumber),\r\n            to: Formatter.allowNull(address),\r\n            value: Formatter.allowNull(bigNumber),\r\n            data: Formatter.allowNull(strictData),\r\n            type: Formatter.allowNull(number),\r\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\r\n        };\r\n        formats.receiptLog = {\r\n            transactionIndex: number,\r\n            blockNumber: number,\r\n            transactionHash: hash,\r\n            address: address,\r\n            topics: Formatter.arrayOf(hash),\r\n            data: data,\r\n            logIndex: number,\r\n            blockHash: hash,\r\n        };\r\n        formats.receipt = {\r\n            to: Formatter.allowNull(this.address, null),\r\n            from: Formatter.allowNull(this.address, null),\r\n            contractAddress: Formatter.allowNull(address, null),\r\n            transactionIndex: number,\r\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\r\n            root: Formatter.allowNull(hex),\r\n            gasUsed: bigNumber,\r\n            logsBloom: Formatter.allowNull(data),\r\n            blockHash: hash,\r\n            transactionHash: hash,\r\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\r\n            blockNumber: number,\r\n            confirmations: Formatter.allowNull(number, null),\r\n            cumulativeGasUsed: bigNumber,\r\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\r\n            status: Formatter.allowNull(number),\r\n            type: type\r\n        };\r\n        formats.block = {\r\n            hash: Formatter.allowNull(hash),\r\n            parentHash: hash,\r\n            number: number,\r\n            timestamp: number,\r\n            nonce: Formatter.allowNull(hex),\r\n            difficulty: this.difficulty.bind(this),\r\n            gasLimit: bigNumber,\r\n            gasUsed: bigNumber,\r\n            miner: Formatter.allowNull(address),\r\n            extraData: data,\r\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\r\n            baseFeePerGas: Formatter.allowNull(bigNumber)\r\n        };\r\n        formats.blockWithTransactions = shallowCopy(formats.block);\r\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\r\n        formats.filter = {\r\n            fromBlock: Formatter.allowNull(blockTag, undefined),\r\n            toBlock: Formatter.allowNull(blockTag, undefined),\r\n            blockHash: Formatter.allowNull(hash, undefined),\r\n            address: Formatter.allowNull(address, undefined),\r\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\r\n        };\r\n        formats.filterLog = {\r\n            blockNumber: Formatter.allowNull(number),\r\n            blockHash: Formatter.allowNull(hash),\r\n            transactionIndex: number,\r\n            removed: Formatter.allowNull(this.boolean.bind(this)),\r\n            address: address,\r\n            data: Formatter.allowFalsish(data, \"0x\"),\r\n            topics: Formatter.arrayOf(hash),\r\n            transactionHash: hash,\r\n            logIndex: number,\r\n        };\r\n        return formats;\r\n    }\r\n    accessList(accessList) {\r\n        return accessListify(accessList || []);\r\n    }\r\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\r\n    // Strict! Used on input.\r\n    number(number) {\r\n        if (number === \"0x\") {\r\n            return 0;\r\n        }\r\n        return BigNumber.from(number).toNumber();\r\n    }\r\n    type(number) {\r\n        if (number === \"0x\" || number == null) {\r\n            return 0;\r\n        }\r\n        return BigNumber.from(number).toNumber();\r\n    }\r\n    // Strict! Used on input.\r\n    bigNumber(value) {\r\n        return BigNumber.from(value);\r\n    }\r\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\r\n    boolean(value) {\r\n        if (typeof (value) === \"boolean\") {\r\n            return value;\r\n        }\r\n        if (typeof (value) === \"string\") {\r\n            value = value.toLowerCase();\r\n            if (value === \"true\") {\r\n                return true;\r\n            }\r\n            if (value === \"false\") {\r\n                return false;\r\n            }\r\n        }\r\n        throw new Error(\"invalid boolean - \" + value);\r\n    }\r\n    hex(value, strict) {\r\n        if (typeof (value) === \"string\") {\r\n            if (!strict && value.substring(0, 2) !== \"0x\") {\r\n                value = \"0x\" + value;\r\n            }\r\n            if (isHexString(value)) {\r\n                return value.toLowerCase();\r\n            }\r\n        }\r\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\r\n    }\r\n    data(value, strict) {\r\n        const result = this.hex(value, strict);\r\n        if ((result.length % 2) !== 0) {\r\n            throw new Error(\"invalid data; odd-length - \" + value);\r\n        }\r\n        return result;\r\n    }\r\n    // Requires an address\r\n    // Strict! Used on input.\r\n    address(value) {\r\n        return getAddress(value);\r\n    }\r\n    callAddress(value) {\r\n        if (!isHexString(value, 32)) {\r\n            return null;\r\n        }\r\n        const address = getAddress(hexDataSlice(value, 12));\r\n        return (address === AddressZero) ? null : address;\r\n    }\r\n    contractAddress(value) {\r\n        return getContractAddress(value);\r\n    }\r\n    // Strict! Used on input.\r\n    blockTag(blockTag) {\r\n        if (blockTag == null) {\r\n            return \"latest\";\r\n        }\r\n        if (blockTag === \"earliest\") {\r\n            return \"0x0\";\r\n        }\r\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\r\n            return blockTag;\r\n        }\r\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\r\n            return hexValue(blockTag);\r\n        }\r\n        throw new Error(\"invalid blockTag\");\r\n    }\r\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\r\n    hash(value, strict) {\r\n        const result = this.hex(value, strict);\r\n        if (hexDataLength(result) !== 32) {\r\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\r\n        }\r\n        return result;\r\n    }\r\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\r\n    difficulty(value) {\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n        const v = BigNumber.from(value);\r\n        try {\r\n            return v.toNumber();\r\n        }\r\n        catch (error) { }\r\n        return null;\r\n    }\r\n    uint256(value) {\r\n        if (!isHexString(value)) {\r\n            throw new Error(\"invalid uint256\");\r\n        }\r\n        return hexZeroPad(value, 32);\r\n    }\r\n    _block(value, format) {\r\n        if (value.author != null && value.miner == null) {\r\n            value.miner = value.author;\r\n        }\r\n        // The difficulty may need to come from _difficulty in recursed blocks\r\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\r\n        const result = Formatter.check(format, value);\r\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\r\n        return result;\r\n    }\r\n    block(value) {\r\n        return this._block(value, this.formats.block);\r\n    }\r\n    blockWithTransactions(value) {\r\n        return this._block(value, this.formats.blockWithTransactions);\r\n    }\r\n    // Strict! Used on input.\r\n    transactionRequest(value) {\r\n        return Formatter.check(this.formats.transactionRequest, value);\r\n    }\r\n    transactionResponse(transaction) {\r\n        // Rename gas to gasLimit\r\n        if (transaction.gas != null && transaction.gasLimit == null) {\r\n            transaction.gasLimit = transaction.gas;\r\n        }\r\n        // Some clients (TestRPC) do strange things like return 0x0 for the\r\n        // 0 address; correct this to be a real address\r\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\r\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\r\n        }\r\n        // Rename input to data\r\n        if (transaction.input != null && transaction.data == null) {\r\n            transaction.data = transaction.input;\r\n        }\r\n        // If to and creates are empty, populate the creates from the transaction\r\n        if (transaction.to == null && transaction.creates == null) {\r\n            transaction.creates = this.contractAddress(transaction);\r\n        }\r\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\r\n            transaction.accessList = [];\r\n        }\r\n        const result = Formatter.check(this.formats.transaction, transaction);\r\n        if (transaction.chainId != null) {\r\n            let chainId = transaction.chainId;\r\n            if (isHexString(chainId)) {\r\n                chainId = BigNumber.from(chainId).toNumber();\r\n            }\r\n            result.chainId = chainId;\r\n        }\r\n        else {\r\n            let chainId = transaction.networkId;\r\n            // geth-etc returns chainId\r\n            if (chainId == null && result.v == null) {\r\n                chainId = transaction.chainId;\r\n            }\r\n            if (isHexString(chainId)) {\r\n                chainId = BigNumber.from(chainId).toNumber();\r\n            }\r\n            if (typeof (chainId) !== \"number\" && result.v != null) {\r\n                chainId = (result.v - 35) / 2;\r\n                if (chainId < 0) {\r\n                    chainId = 0;\r\n                }\r\n                chainId = parseInt(chainId);\r\n            }\r\n            if (typeof (chainId) !== \"number\") {\r\n                chainId = 0;\r\n            }\r\n            result.chainId = chainId;\r\n        }\r\n        // 0x0000... should actually be null\r\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\r\n            result.blockHash = null;\r\n        }\r\n        return result;\r\n    }\r\n    transaction(value) {\r\n        return parseTransaction(value);\r\n    }\r\n    receiptLog(value) {\r\n        return Formatter.check(this.formats.receiptLog, value);\r\n    }\r\n    receipt(value) {\r\n        const result = Formatter.check(this.formats.receipt, value);\r\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\r\n        if (result.root != null) {\r\n            if (result.root.length <= 4) {\r\n                // Could be 0x00, 0x0, 0x01 or 0x1\r\n                const value = BigNumber.from(result.root).toNumber();\r\n                if (value === 0 || value === 1) {\r\n                    // Make sure if both are specified, they match\r\n                    if (result.status != null && (result.status !== value)) {\r\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\r\n                    }\r\n                    result.status = value;\r\n                    delete result.root;\r\n                }\r\n                else {\r\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\r\n                }\r\n            }\r\n            else if (result.root.length !== 66) {\r\n                // Must be a valid bytes32\r\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\r\n            }\r\n        }\r\n        if (result.status != null) {\r\n            result.byzantium = true;\r\n        }\r\n        return result;\r\n    }\r\n    topics(value) {\r\n        if (Array.isArray(value)) {\r\n            return value.map((v) => this.topics(v));\r\n        }\r\n        else if (value != null) {\r\n            return this.hash(value, true);\r\n        }\r\n        return null;\r\n    }\r\n    filter(value) {\r\n        return Formatter.check(this.formats.filter, value);\r\n    }\r\n    filterLog(value) {\r\n        return Formatter.check(this.formats.filterLog, value);\r\n    }\r\n    static check(format, object) {\r\n        const result = {};\r\n        for (const key in format) {\r\n            try {\r\n                const value = format[key](object[key]);\r\n                if (value !== undefined) {\r\n                    result[key] = value;\r\n                }\r\n            }\r\n            catch (error) {\r\n                error.checkKey = key;\r\n                error.checkValue = object[key];\r\n                throw error;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // if value is null-ish, nullValue is returned\r\n    static allowNull(format, nullValue) {\r\n        return (function (value) {\r\n            if (value == null) {\r\n                return nullValue;\r\n            }\r\n            return format(value);\r\n        });\r\n    }\r\n    // If value is false-ish, replaceValue is returned\r\n    static allowFalsish(format, replaceValue) {\r\n        return (function (value) {\r\n            if (!value) {\r\n                return replaceValue;\r\n            }\r\n            return format(value);\r\n        });\r\n    }\r\n    // Requires an Array satisfying check\r\n    static arrayOf(format) {\r\n        return (function (array) {\r\n            if (!Array.isArray(array)) {\r\n                throw new Error(\"not an array\");\r\n            }\r\n            const result = [];\r\n            array.forEach(function (value) {\r\n                result.push(format(value));\r\n            });\r\n            return result;\r\n        });\r\n    }\r\n}\r\nexport function isCommunityResourcable(value) {\r\n    return (value && typeof (value.isCommunityResource) === \"function\");\r\n}\r\nexport function isCommunityResource(value) {\r\n    return (isCommunityResourcable(value) && value.isCommunityResource());\r\n}\r\n// Show the throttle message only once\r\nlet throttleMessage = false;\r\nexport function showThrottleMessage() {\r\n    if (throttleMessage) {\r\n        return;\r\n    }\r\n    throttleMessage = true;\r\n    console.log(\"========= NOTICE =========\");\r\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\r\n    console.log(\"\");\r\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\r\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\r\n    console.log(\"\");\r\n    console.log(\"While your application will continue to function, we highly recommended\");\r\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\r\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\r\n    console.log(\"\");\r\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\r\n    console.log(\"==========================\");\r\n}\r\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"module"}