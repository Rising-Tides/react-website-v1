{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\seins\\\\Documents\\\\GitHub\\\\react-website-v1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\seins\\\\Documents\\\\GitHub\\\\react-website-v1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import React from'react';import'../../App.css';import{tipJar}from'../HeroSection';import{Button}from'../Button';export default function Donate(){// return <h1 className='donate'>LIKE & SUBSCRIBE</h1>;\nvar tipETH=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,value;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{_window=window,ethereum=_window.ethereum;if(ethereum){// const provider = new ethers.providers.Web3Provider(ethereum);\n// const signer = provider.getSigner();\nvalue=0.01;// ether\nwindow.open(\"https://pay.buildship.dev/to/\".concat(tipJar,\"?value=\").concat(value));// const nftContract = new ethers.Contract(contractAddress, abi, signer);\n// console.log(\"Initialize payment\");\n// let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n// console.log(\"Mining... please wait\");\n// await nftTxn.wait();\n// console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}case 1:case\"end\":return _context.stop();}}},_callee);}));return function tipETH(){return _ref.apply(this,arguments);};}();// const connectWalletButton = () => {\n//   return (\n//     <Button  \n//       className='btns'\n//       buttonStyle='btn--primary'\n//       buttonSize='btn--large'\n//       onClick={connectWalletHandler}\n//       >\n//       CONNECT WALLET\n//     </Button>\n//   )\n// }\nvar mintNftButton=function mintNftButton(){return/*#__PURE__*/ (// <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//   Mint NFT\n// </button>\nReact.createElement(\"div\",{className:\"tip\"},/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\"// onClick={mintNftHandler}\n,onClick:tipETH},\"Send ETH\")));};return/*#__PURE__*/React.createElement(\"div\",{className:\"donate\"},mintNftButton());}","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/src/components/pages/Donate.js"],"names":["React","tipJar","Button","Donate","tipETH","window","ethereum","value","open","console","log","err","mintNftButton"],"mappings":"+VAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,eAAP,CACA,OAASC,MAAT,KAAuB,gBAAvB,CACA,OAASC,MAAT,KAAuB,WAAvB,CAEA,cAAe,SAASC,CAAAA,MAAT,EAAkB,CAC/B;AAEA,GAAMC,CAAAA,MAAM,0FAAG,8JACb,GAAI,SACmBC,MADnB,CACMC,QADN,SACMA,QADN,CAGF,GAAIA,QAAJ,CAAc,CACZ;AACA;AACMC,KAHM,CAGE,IAHF,CAGO;AACnBF,MAAM,CAACG,IAAP,wCAA4CP,MAA5C,mBAA4DM,KAA5D,GAEA;AAEA;AACA;AAEA;AACA;AAEA;AAED,CAhBD,IAgBO,CACLE,OAAO,CAACC,GAAR,CAAY,gCAAZ,EACD,CAEF,CAAC,MAAOC,GAAP,CAAY,CACZF,OAAO,CAACC,GAAR,CAAYC,GAAZ,EACD,CA1BY,sDAAH,kBAANP,CAAAA,MAAM,0CAAZ,CA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMQ,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,oBACE;AACA;AACA;AACA,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,MAAD,EACE,SAAS,CAAC,MADZ,CAEE,WAAW,CAAC,cAFd,CAGE,UAAU,CAAC,YACX;AAJF,CAKE,OAAO,CAAER,MALX,aADF,CAJF,EAmBD,CApBD,CAqBA,mBACE,2BAAK,SAAS,CAAC,QAAf,EACGQ,aAAa,EADhB,CADF,CAMD","sourcesContent":["import React from 'react';\r\nimport '../../App.css';\r\nimport { tipJar } from '../HeroSection';\r\nimport { Button } from '../Button';\r\n\r\nexport default function Donate() {\r\n  // return <h1 className='donate'>LIKE & SUBSCRIBE</h1>;\r\n    \r\n  const tipETH = async () => { \r\n    try {\r\n      const { ethereum } = window;\r\n  \r\n      if (ethereum) {\r\n        // const provider = new ethers.providers.Web3Provider(ethereum);\r\n        // const signer = provider.getSigner();\r\n        const value = 0.01 // ether\r\n        window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\r\n      \r\n        // const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n        // console.log(\"Initialize payment\");\r\n        // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n        // console.log(\"Mining... please wait\");\r\n        // await nftTxn.wait();\r\n  \r\n        // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n  \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  \r\n  // const connectWalletButton = () => {\r\n  //   return (\r\n  //     <Button  \r\n  //       className='btns'\r\n  //       buttonStyle='btn--primary'\r\n  //       buttonSize='btn--large'\r\n  //       onClick={connectWalletHandler}\r\n  //       >\r\n  //       CONNECT WALLET\r\n  //     </Button>\r\n  //   )\r\n  // }\r\n\r\n  const mintNftButton = () => {\r\n    return (\r\n      // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n      //   Mint NFT\r\n      // </button>\r\n      <div className='tip'>\r\n        <Button  \r\n          className='btns'\r\n          buttonStyle='btn--outline'\r\n          buttonSize='btn--large'\r\n          // onClick={mintNftHandler}\r\n          onClick={tipETH}\r\n          >\r\n          Send ETH\r\n        </Button>\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n  return(\r\n    <div className='donate'>\r\n      {mintNftButton()}\r\n    </div>\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}