{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Keypair, Transaction } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\nimport bs58 from 'bs58';\nimport { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\n\nclass PrivateKeyWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n\n    this.provider = provider;\n  }\n\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n\n  async signAndSendTransaction(transaction) {\n    const signedTx = await this.signTransaction(transaction);\n    const sig = await this.provider.request({\n      method: \"sendTransaction\",\n      params: [bs58.encode(signedTx.serialize())]\n    });\n    return {\n      signature: sig\n    };\n  }\n\n  async sendTransaction(transaction) {\n    const signedTx = await this.signTransaction(transaction);\n    const sig = await this.provider.request({\n      method: \"sendTransaction\",\n      params: [bs58.encode(signedTx.serialize())]\n    });\n    return {\n      signature: sig\n    };\n  }\n\n  async signTransaction(transaction) {\n    const privateKey = await this.provider.request({\n      method: \"solanaPrivateKey\"\n    });\n    const keyPair = Keypair.fromSecretKey(Buffer.from(privateKey, \"hex\"));\n    transaction.partialSign(keyPair);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const privateKey = await this.provider.request({\n      method: \"solanaPrivateKey\"\n    });\n    const keyPair = Keypair.fromSecretKey(Buffer.from(privateKey, \"hex\"));\n    return transactions.map(transaction => {\n      transaction.partialSign(keyPair);\n      return transaction;\n    });\n  }\n\n  async signMessage(data) {\n    const privateKey = await this.provider.request({\n      method: \"solanaPrivateKey\"\n    });\n    const keyPair = Keypair.fromSecretKey(Buffer.from(privateKey, \"hex\"));\n    const signature = nacl.sign.detached(data, keyPair.secretKey);\n    return signature;\n  }\n\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n\n}\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  const configMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n  return configMiddleware;\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction createGetAccountsMiddleware(_ref) {\n  let {\n    getAccounts\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\"); // This calls from the prefs controller\n\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nfunction createRequestAccountsMiddleware(_ref2) {\n  let {\n    requestAccounts\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\"); // This calls the UI login function\n\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(\"WalletMiddleware - \".concat(targetMethod, \" not provided\"));\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\n\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey)]);\n}\n\nfunction createChainSwitchMiddleware(_ref3) {\n  let {\n    addNewChainConfig,\n    switchSolanaChain\n  } = _ref3;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\n\nfunction createAccountMiddleware(_ref4) {\n  let {\n    updatePrivatekey\n  } = _ref4;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(_objectSpread$3({}, req));\n    res.result = result;\n  });\n}\n\nconst getPhantomHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const message = bs58.decode(req.params.message);\n      const txn = Transaction.from(message);\n      const transaction = await injectedProvider.signTransaction(txn);\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params;\n\n      const message = await injectedProvider.request({\n        method: \"signMessage\",\n        params: {\n          message: (_req$params = req.params) === null || _req$params === void 0 ? void 0 : _req$params.message\n        }\n      });\n      return message;\n    },\n    signAndSendTransaction: async req => {\n      const message = bs58.decode(req.params.message);\n      const txn = Transaction.from(message);\n      const txRes = await injectedProvider.signAndSendTransaction(txn);\n      return {\n        signature: txRes.signature\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params2, _req$params3;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message) || !((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params.message.map(msg => {\n        const decodedMsg = bs58.decode(msg);\n        return Transaction.from(decodedMsg);\n      });\n      const transaction = await injectedProvider.signAllTransactions(txns);\n      return transaction;\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass PhantomInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$2(_objectSpread$2({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  async setupProvider(injectedProvider) {\n    const providerHandlers = getPhantomHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(configMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(injectedProvider);\n  }\n\n  async lookupNetwork(_) {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\"; // const genesisHash = await phantomProvider.request<string>({\n    //   method: \"getGenesisHash\",\n    //   params: [],\n    // });\n    // const { chainConfig } = this.config;\n    // if (!genesisHash) throw WalletInitializationError.rpcConnectionError(`Failed to connect with phantom wallet`);\n    // if (chainConfig.chainId !== genesisHash.substring(0, 32))\n    //   throw WalletInitializationError.invalidNetwork(\n    //     `Wallet is connected to wrong network,Please change your network to ${\n    //       SOLANA_NETWORKS[chainConfig.chainId] || chainConfig.displayName\n    //     } from phantom wallet extention.`\n    //   );\n    // return genesisHash.substring(0, 32);\n  }\n\n}\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_accounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n\n      const message = await injectedProvider.request({\n        method: \"sign_message\",\n        params: {\n          data: (_req$params = req.params) === null || _req$params === void 0 ? void 0 : _req$params.message\n        }\n      });\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const message = bs58.decode(req.params.message).toString(\"hex\");\n      const response = await injectedProvider.request({\n        method: \"sign_transaction\",\n        params: {\n          message\n        }\n      });\n      const buf = Buffer.from(response, \"hex\");\n      const sendTx = Transaction.from(buf);\n      return sendTx;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const message = bs58.decode(req.params.message).toString(\"hex\");\n      const response = await injectedProvider.request({\n        method: \"send_transaction\",\n        params: {\n          message\n        }\n      });\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const messages = [];\n\n      for (const transaction of req.params.message) {\n        const message = bs58.decode(transaction).toString(\"hex\");\n        messages.push(message);\n      }\n\n      const response = await injectedProvider.request({\n        method: \"sign_all_transactions\",\n        params: {\n          message: messages\n        }\n      });\n      return response;\n    }\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusInjectedProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : \"0x\".concat(parseInt(connectedChainId, 10).toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : \"0x\".concat(parseInt(chainId, 10).toString(16)); // Check if chainId changed and trigger event\n\n      this.configure({\n        chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n\n}\n\nasync function getProviderHandlers(_ref) {\n  let {\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n\n  const transactionGenerator = serializedTx => {\n    const decodedTx = bs58.decode(serializedTx);\n    const tx = Transaction.from(decodedTx);\n    return tx;\n  };\n\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPrivateKey: async () => privKey,\n    signTransaction: async req => {\n      var _req$params, _req$params2;\n\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const transaction = transactionGenerator((_req$params2 = req.params) === null || _req$params2 === void 0 ? void 0 : _req$params2.message);\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params3;\n\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params4, _req$params5;\n\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const _providerEngineProxy = getProviderEngineProxy();\n\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = transactionGenerator((_req$params5 = req.params) === null || _req$params5 === void 0 ? void 0 : _req$params5.message);\n      transaction.sign(keyPair);\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params6, _req$params7;\n\n      if (!((_req$params6 = req.params) !== null && _req$params6 !== void 0 && _req$params6.message) || !((_req$params7 = req.params) !== null && _req$params7 !== void 0 && _req$params7.message.length)) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const signedTransactions = [];\n\n      for (const tx of ((_req$params8 = req.params) === null || _req$params8 === void 0 ? void 0 : _req$params8.message) || []) {\n        var _req$params8;\n\n        const transaction = transactionGenerator(tx);\n        transaction.partialSign(keyPair);\n        signedTransactions.push(transaction);\n      }\n\n      return signedTransactions;\n    }\n  };\n  return providerHandlers;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"requestAccounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(\"Failed to lookup network for following rpc target: \".concat(chainConfig.rpcTarget));\n    this.update({\n      chainId: chainConfig.chainId\n    });\n\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n\n    return this.state.chainId;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = req.params;\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n\n    this.provider = provider;\n  }\n\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\",\n      params: {}\n    });\n    return accounts;\n  }\n\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: bs58.encode(transaction.serialize({\n          requireAllSignatures: false\n        }))\n      }\n    });\n    return {\n      signature\n    };\n  }\n\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: bs58.encode(transaction.serialize({\n          requireAllSignatures: false\n        }))\n      }\n    });\n    return signedTransaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const messages = transactions.map(transaction => {\n      return bs58.encode(transaction.serialize({\n        requireAllSignatures: false\n      }));\n    });\n    const signedTransaction = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: messages\n      }\n    });\n    return signedTransaction;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n\n}\n\nexport { PhantomInjectedProvider, PrivateKeyWallet, SolanaPrivateKeyProvider, SolanaWallet, TorusInjectedProvider };","map":{"version":3,"mappings":"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","names":["PrivateKeyWallet","constructor","provider","_defineProperty","requestAccounts","accounts","request","method","params","signAndSendTransaction","transaction","signedTx","signTransaction","sig","bs58","encode","serialize","signature","sendTransaction","privateKey","keyPair","Keypair","fromSecretKey","Buffer","from","partialSign","signAllTransactions","transactions","map","signMessage","data","nacl","sign","detached","secretKey","args","result","createChainIdMiddleware","chainId","req","res","next","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","configMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","_ref","getAccounts","createAsyncMiddleware","response","Error","undefined","_ref2","targetMethod","handler","createSolanaMiddleware","providerHandlers","getPrivateKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","createChainSwitchMiddleware","_ref3","addNewChainConfig","switchSolanaChain","_ref4","updatePrivatekey","createInjectedProviderProxyMiddleware","_next","getPhantomHandlers","injectedProvider","publicKey","toBytes","ethErrors","rpc","methodNotSupported","message","decode","txn","Transaction","_req$params","txRes","_req$params2","_req$params3","length","invalidParams","txns","msg","decodedMsg","PhantomInjectedProvider","BaseProvider","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","Promise","resolve","setupProvider","solanaMiddleware","injectedProviderProxy","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","getTorusHandlers","toString","buf","sendTx","_req$params4","_req$params5","messages","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","custom","code","connectedChainId","connectedHexChainId","isHexStrict","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","getProviderHandlers","privKey","getProviderEngineProxy","transactionGenerator","serializedTx","decodedTx","tx","keyPairGenerator","toBase58","signedMsg","_providerEngineProxy","_req$params6","_req$params7","signedTransactions","SolanaPrivateKeyProvider","enable","bind","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","chainSwitchMiddleware","accountHandlers","createAccountMiddleware","providerFactory","SolanaWallet","requireAllSignatures","signedTransaction"],"sources":["../src/PrivateKeyWallet.ts","../src/rpc/JrpcClient.ts","../src/rpc/solanaRpcMiddlewares.ts","../src/providers/injectedProviders/injectedProviderProxy.ts","../src/providers/injectedProviders/phantom/providerHandlers.ts","../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../src/providers/injectedProviders/torus/providerHandlers.ts","../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../src/solanaWallet.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null]},"metadata":{},"sourceType":"module"}