{"ast":null,"code":"import React from'react';import'../App.css';import{Button}from'./Button';import'./HeroSection.css';import{useEffect}from'react';// import { useState } from 'react';\nimport $ from'jquery';// import { Link } from 'react-router-dom';\n// import ethSend from 'eth-send';\n// import Web3 from 'web3';\n// import { ethers } from 'ethers';\n// import contract from '../contracts/NFTCollectible.json';\nimport{WalletLinkConnector}from\"@web3-react/walletlink-connector\";import{WalletConnectConnector}from\"@web3-react/walletconnect-connector\";import{InjectedConnector}from\"@web3-react/injected-connector\";import{useWeb3React}from'@web3-react/core';export var CoinbaseWallet=new WalletLinkConnector({url:\"https://mainnet.infura.io/v3/\".concat(process.env.INFURA_KEY),appName:\"Web3-react Demo\",supportedChainIds:[1,3,4,5,42]});export var WalletConnect=new WalletConnectConnector({rpcUrl:\"https://mainnet.infura.io/v3/\".concat(process.env.INFURA_KEY),bridge:\"https://bridge.walletconnect.org\",qrcode:true});export var Injected=new InjectedConnector({supportedChainIds:[1,3,4,5,42]});export var tipJar=\"0x8DAA10845A8144469da192ef18b13bCdFBb73591\";export var contractAddress=\"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\";// const abi = contract.abi;\nfunction HeroSection(){var _useWeb3React=useWeb3React(),activate=_useWeb3React.activate,deactivate=_useWeb3React.deactivate;// const [currentAccount, setCurrentAccount] = useState(null);\n// const [setCurrentAccount] = useState(null);\n// const checkWalletIsConnected = async () => { \n//   const { ethereum } = window;\n//   // if (!ethereum) {\n//   //   console.log(\"Make sure you have Metamask installed!\");\n//   //   return;\n//   // } else {\n//   //   console.log(\"Wallet exists! We're ready to go!\")\n//   // }\n//   if (window.ethereum) {\n//     handleEthereum();\n//   } else {\n//     window.addEventListener('ethereum#initialized', handleEthereum, {\n//       once: true,\n//     });\n//     // If the event is not dispatched by the end of the timeout,\n//     // the user probably doesn't have MetaMask installed.\n//     setTimeout(handleEthereum, 3000); // 3 seconds\n//   }\n//   function handleEthereum() {\n//     const { ethereum } = window;\n//     if (ethereum && ethereum.isMetaMask) {\n//       console.log('Ethereum successfully detected!');\n//       // Access the decentralized web!\n//     } else {\n//       console.log('Please install MetaMask  ');\n//     }\n//   }\n//   const accounts = await ethereum.request({ method: 'eth_accounts' });\n//   if (accounts.length !== 0) {\n//     const account = accounts[0];\n//     console.log(\"Found an authorized account: \", account);\n//     setCurrentAccount(account); \n//   } else {\n//     console.log(\"No authorized account found\");\n//   }\n// }\n// const connectWalletHandler = async () => { \n//   const { ethereum } = window;\n//   if (!ethereum) {\n//      alert(\"Please install Metamask\");\n//     window.location.replace(\"https://metamask.io/download/\");\n//   }\n//   try {\n//     const accounts = await ethereum.request({method: 'eth_requestAccounts' });\n//     console.log(\"Found an account! Address: \", accounts[0]);\n//     setCurrentAccount(accounts[0]);\n//   } catch (err) {\n//     console.log(err)\n//   }\n// }\n// const mintNftHandler = async () => { \n//   try {\n//     const { ethereum } = window;\n//     if (ethereum) {\n//       const provider = new ethers.providers.Web3Provider(ethereum);\n//       const signer = provider.getSigner();\n//       const nftContract = new ethers.Contract(contractAddress, abi, signer);\n//       console.log(\"Initialize payment\");\n//       let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n//       console.log(\"Mining... please wait\");\n//       await nftTxn.wait();\n//       console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n//     } else {\n//       console.log(\"Ethereum object does not exist\");\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\n// const tipETH = async () => { \n//   try {\n//     const { ethereum } = window;\n//     if (ethereum) {\n//       // const provider = new ethers.providers.Web3Provider(ethereum);\n//       // const signer = provider.getSigner();\n//       const value = 0.01 // ether\n//       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\n//       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\n//       // console.log(\"Initialize payment\");\n//       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\n//       // console.log(\"Mining... please wait\");\n//       // await nftTxn.wait();\n//       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\n//     } else {\n//       console.log(\"Ethereum object does not exist\");\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\n// // const connectWalletButton = () => {\n// //   return (\n// //     <Button  \n// //       className='btns'\n// //       buttonStyle='btn--primary'\n// //       buttonSize='btn--large'\n// //       onClick={connectWalletHandler}\n// //       >\n// //       CONNECT WALLET\n// //     </Button>\n// //   )\n// // }\n// const mintNftButton = () => {\n//   return (\n//     // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n//     //   Mint NFT\n//     // </button>\n//     <Button  \n//       className='btns'\n//       buttonStyle='btn--outline'\n//       buttonSize='btn--large'\n//       // onClick={mintNftHandler}\n//       onClick={tipETH}\n//       >\n//       Send Tip\n//     </Button>\n//   )\n// }\n// var images = [\"img_1.jpg\",\"img_2.jpg\",\"img_3.jpg\"];\n// function slideshow() { \n//   if (cnt>=images.length) cnt=0; \n//     $('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\");\n// }\n// function sendEth(fromAddress, toAddress, etherValue) {\n//   var weiValue = etherValue * Math.pow(10, 18);\n//     var weiValueHex = weiValue.toString(16);\n//   if (window.ethereum === undefined) {\n//         console.log('[ethTip] sendEth called without window.ethereum object');\n//         return;\n//     }\n//     var params = [{\n//         to: toAddress,\n//         from: fromAddress,\n//         value: weiValueHex\n//     }];\n//   window.ethereum.request({\n//         method: 'eth_sendTransaction',\n//         params: params\n//     }) \n//     .then((result) => {\n//         console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\n//     alert('Thanks for the eth! https://etherscan.io/tx/' + result);\n//   })\n//     .catch((error) => {\n//         console.log('[ethTip] ' + error['message']);\n//     });\n// }\n// function connectAndSendEth(toAddress, etherValue) {\n//     if (window.ethereum === undefined) {\n//         console.log('[ethTip] connectAndSendEth called without window.ethereum object');\n//         return;\n//     }\n//     window.ethereum.request(\n//         { method: 'eth_requestAccounts' }\n//     )\n//     .then((accounts) => {\n//         if (accounts.length > 0) {\n//             sendEth(accounts[0], toAddress, etherValue);\n//         }\n//     })\n//     .catch((error) => {\n//         console.log('[ethTip] Error: ' + JSON.stringify(error));\n//     });\n// }\nuseEffect(function(){// checkWalletIsConnected();\nvar images=[\"images/IMG_9.jpg\",\"images/IMG_2.jpg\",\"images/IMG_6.jpg\",\"images/IMG_4.jpg\"];var cnt=0;var iId=setInterval(function(){if(cnt>=images.length)cnt=0;$('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\",\"center center/cover no-repeat\");},2500);return function(){return clearInterval(iId);};},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"hero-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"hero-btns\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){return window.open('https://instagram.com/xojustkirst');}},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-instagram\"}))),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){return window.open('https://twitch.tv/xojustkirst');}},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-twitch\"}))),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){activate(CoinbaseWallet);}},\"Coinbase Wallet\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){activate(WalletConnect);}},\"Wallet Connect\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:function onClick(){activate(Injected);}},\"Metamask\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{className:\"btns\",buttonStyle:\"btn--outline\",buttonSize:\"btn--large\",onClick:deactivate},\"Disconnect\"))),/*#__PURE__*/React.createElement(\"div\",null));}export default HeroSection;","map":{"version":3,"sources":["C:/Users/seins/Documents/GitHub/react-website-v1/src/components/HeroSection.js"],"names":["React","Button","useEffect","$","WalletLinkConnector","WalletConnectConnector","InjectedConnector","useWeb3React","CoinbaseWallet","url","process","env","INFURA_KEY","appName","supportedChainIds","WalletConnect","rpcUrl","bridge","qrcode","Injected","tipJar","contractAddress","HeroSection","activate","deactivate","images","cnt","iId","setInterval","length","css","clearInterval","window","open"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport { Button } from './Button';\r\nimport './HeroSection.css';\r\nimport { useEffect } from 'react';\r\n// import { useState } from 'react';\r\nimport $ from 'jquery';\r\n// import { Link } from 'react-router-dom';\r\n\r\n// import ethSend from 'eth-send';\r\n// import Web3 from 'web3';\r\n\r\n// import { ethers } from 'ethers';\r\n// import contract from '../contracts/NFTCollectible.json';\r\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\r\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport const CoinbaseWallet = new WalletLinkConnector({\r\n url: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\r\n appName: \"Web3-react Demo\",\r\n supportedChainIds: [1, 3, 4, 5, 42],\r\n});\r\n\r\nexport const WalletConnect = new WalletConnectConnector({\r\n rpcUrl: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\r\n bridge: \"https://bridge.walletconnect.org\",\r\n qrcode: true,\r\n});\r\n\r\nexport const Injected = new InjectedConnector({\r\n supportedChainIds: [1, 3, 4, 5, 42]\r\n});\r\nexport const tipJar = \"0x8DAA10845A8144469da192ef18b13bCdFBb73591\";\r\nexport const contractAddress = \"0x836049Ddc0e177D2f52871b2d6e443dac0f2b659\";\r\n// const abi = contract.abi;\r\n\r\n\r\nfunction HeroSection() {\r\n  const { activate, deactivate} = useWeb3React();\r\n  // const [currentAccount, setCurrentAccount] = useState(null);\r\n  // const [setCurrentAccount] = useState(null);\r\n\r\n  // const checkWalletIsConnected = async () => { \r\n  //   const { ethereum } = window;\r\n  \r\n  //   // if (!ethereum) {\r\n  //   //   console.log(\"Make sure you have Metamask installed!\");\r\n  //   //   return;\r\n  //   // } else {\r\n  //   //   console.log(\"Wallet exists! We're ready to go!\")\r\n  //   // }\r\n  //   if (window.ethereum) {\r\n  //     handleEthereum();\r\n  //   } else {\r\n  //     window.addEventListener('ethereum#initialized', handleEthereum, {\r\n  //       once: true,\r\n  //     });\r\n    \r\n  //     // If the event is not dispatched by the end of the timeout,\r\n  //     // the user probably doesn't have MetaMask installed.\r\n  //     setTimeout(handleEthereum, 3000); // 3 seconds\r\n  //   }\r\n    \r\n  //   function handleEthereum() {\r\n  //     const { ethereum } = window;\r\n  //     if (ethereum && ethereum.isMetaMask) {\r\n  //       console.log('Ethereum successfully detected!');\r\n  //       // Access the decentralized web!\r\n  //     } else {\r\n  //       console.log('Please install MetaMask  ');\r\n  //     }\r\n  //   }\r\n  //   const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n  \r\n  //   if (accounts.length !== 0) {\r\n  //     const account = accounts[0];\r\n  //     console.log(\"Found an authorized account: \", account);\r\n  //     setCurrentAccount(account); \r\n  //   } else {\r\n  //     console.log(\"No authorized account found\");\r\n  //   }\r\n  // }\r\n  \r\n  // const connectWalletHandler = async () => { \r\n  //   const { ethereum } = window;\r\n  \r\n  //   if (!ethereum) {\r\n  //      alert(\"Please install Metamask\");\r\n  //     window.location.replace(\"https://metamask.io/download/\");\r\n  //   }\r\n  \r\n  //   try {\r\n  //     const accounts = await ethereum.request({method: 'eth_requestAccounts' });\r\n  //     console.log(\"Found an account! Address: \", accounts[0]);\r\n  //     setCurrentAccount(accounts[0]);\r\n  //   } catch (err) {\r\n  //     console.log(err)\r\n  //   }\r\n  // }\r\n  \r\n  // const mintNftHandler = async () => { \r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  \r\n  //     if (ethereum) {\r\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       const signer = provider.getSigner();\r\n  //       const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n  //       console.log(\"Initialize payment\");\r\n  //       let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n  //       console.log(\"Mining... please wait\");\r\n  //       await nftTxn.wait();\r\n  \r\n  //       console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n  //     } else {\r\n  //       console.log(\"Ethereum object does not exist\");\r\n  //     }\r\n  \r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  \r\n  // const tipETH = async () => { \r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  \r\n  //     if (ethereum) {\r\n  //       // const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       // const signer = provider.getSigner();\r\n  //       const value = 0.01 // ether\r\n  //       window.open(`https://pay.buildship.dev/to/${tipJar}?value=${value}`);\r\n      \r\n  //       // const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n  \r\n  //       // console.log(\"Initialize payment\");\r\n  //       // let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"0.01\") });\r\n  \r\n  //       // console.log(\"Mining... please wait\");\r\n  //       // await nftTxn.wait();\r\n  \r\n  //       // console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash\");\r\n  \r\n  //     } else {\r\n  //       console.log(\"Ethereum object does not exist\");\r\n  //     }\r\n  \r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  \r\n  // // const connectWalletButton = () => {\r\n  // //   return (\r\n  // //     <Button  \r\n  // //       className='btns'\r\n  // //       buttonStyle='btn--primary'\r\n  // //       buttonSize='btn--large'\r\n  // //       onClick={connectWalletHandler}\r\n  // //       >\r\n  // //       CONNECT WALLET\r\n  // //     </Button>\r\n  // //   )\r\n  // // }\r\n  \r\n  // const mintNftButton = () => {\r\n  //   return (\r\n  //     // <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n  //     //   Mint NFT\r\n  //     // </button>\r\n  //     <Button  \r\n  //       className='btns'\r\n  //       buttonStyle='btn--outline'\r\n  //       buttonSize='btn--large'\r\n  //       // onClick={mintNftHandler}\r\n  //       onClick={tipETH}\r\n  //       >\r\n  //       Send Tip\r\n  //     </Button>\r\n  //   )\r\n  // }\r\n  // var images = [\"img_1.jpg\",\"img_2.jpg\",\"img_3.jpg\"];\r\n  \r\n  // function slideshow() { \r\n  //   if (cnt>=images.length) cnt=0; \r\n  //     $('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\");\r\n  // }\r\n  // function sendEth(fromAddress, toAddress, etherValue) {\r\n  //   var weiValue = etherValue * Math.pow(10, 18);\r\n  //     var weiValueHex = weiValue.toString(16);\r\n      \r\n  //   if (window.ethereum === undefined) {\r\n  //         console.log('[ethTip] sendEth called without window.ethereum object');\r\n  //         return;\r\n  //     }\r\n  \r\n  //     var params = [{\r\n  //         to: toAddress,\r\n  //         from: fromAddress,\r\n  //         value: weiValueHex\r\n  //     }];\r\n      \r\n  //   window.ethereum.request({\r\n  //         method: 'eth_sendTransaction',\r\n  //         params: params\r\n  //     }) \r\n  //     .then((result) => {\r\n  //         console.log('[ethTip] User completed Tx: https://etherscan.io/tx/' + result);\r\n  //     alert('Thanks for the eth! https://etherscan.io/tx/' + result);\r\n  //   })\r\n  //     .catch((error) => {\r\n  //         console.log('[ethTip] ' + error['message']);\r\n  //     });\r\n  // }\r\n  \r\n  // function connectAndSendEth(toAddress, etherValue) {\r\n  //     if (window.ethereum === undefined) {\r\n  //         console.log('[ethTip] connectAndSendEth called without window.ethereum object');\r\n  //         return;\r\n  //     }\r\n  \r\n  //     window.ethereum.request(\r\n  //         { method: 'eth_requestAccounts' }\r\n  //     )\r\n  //     .then((accounts) => {\r\n  //         if (accounts.length > 0) {\r\n  //             sendEth(accounts[0], toAddress, etherValue);\r\n  //         }\r\n  //     })\r\n  //     .catch((error) => {\r\n  //         console.log('[ethTip] Error: ' + JSON.stringify(error));\r\n  //     });\r\n  // }\r\n  \r\n\r\n  useEffect(() => {\r\n    // checkWalletIsConnected();\r\n\r\n    var images = [\"images/IMG_9.jpg\", \"images/IMG_2.jpg\",\"images/IMG_6.jpg\", \"images/IMG_4.jpg\"];\r\n\r\n    var cnt = 0;\r\n    const iId=setInterval(() => {\r\n      if (cnt>=images.length) cnt=0; \r\n        $('.hero-container').css(\"background-image\",\"url(\"+images[cnt++]+\")\", \"center center/cover no-repeat\");\r\n    }, 2500);\r\n    return () => clearInterval(iId);\r\n\r\n  }, [])  \r\n\r\n  return (\r\n\r\n\r\n    <div className='hero-container'>\r\n      {/* <video src='/videos/video-2.mp4' autoPlay loop muted /> */}\r\n      {/* <img src='/images/IMG_1.jpg'>''</img> */}\r\n      {/* <h1>XOJUSTKIRST</h1> */}\r\n      {/* <p>What are you waiting for?</p> */}\r\n      {/* <p>Send Kirstin some Ethereum!</p> */}\r\n      <div className='hero-btns'>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={()=> window.open('https://instagram.com/xojustkirst')}\r\n          >\r\n          \r\n              <i className='fa fa-instagram' />\r\n\r\n          </Button> \r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={()=> window.open('https://twitch.tv/xojustkirst')}\r\n          >\r\n            <i className='fa fa-twitch' />\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(CoinbaseWallet) }}\r\n          >\r\n            Coinbase Wallet\r\n          </Button>\r\n        </div>\r\n        <div>  \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(WalletConnect) }}\r\n          >\r\n            Wallet Connect\r\n          </Button>\r\n        </div>\r\n        <div>  \r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => { activate(Injected) }}\r\n          >\r\n            Metamask\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={deactivate}\r\n          >\r\n            Disconnect\r\n          </Button> \r\n          {/* <Button\r\n            className='btns'\r\n            buttonStyle='btn--outline'\r\n            buttonSize='btn--large'\r\n            onClick={() => {connectAndSendEth(tipJar, 0.02)}}\r\n          > */}\r\n            {/* Donate\r\n          </Button>  */}\r\n        </div>\r\n\r\n      </div>\r\n      <div>\r\n        {/* {currentAccount ? mintNftButton() : connectWalletButton()} */}\r\n        {/* {mintNftButton()} */}\r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeroSection;\r\n\r\n"]},"metadata":{},"sourceType":"module"}