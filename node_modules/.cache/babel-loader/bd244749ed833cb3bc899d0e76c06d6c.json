{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, log, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };","map":{"version":3,"mappings":"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","names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","options","arguments","isPhantomAvailable","window","solana","_window$solana","isPhantom","isAvailable","_window$solana2","PhantomAdapter","BaseAdapter","constructor","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","_defineProperty","_wallet","off","_onDisconnect","rehydrated","status","CONNECTED","READY","emit","ADAPTER_EVENTS","DISCONNECTED","chainConfig","isWalletConnected","isConnected","provider","phantomProvider","_","Error","setAdapterSettings","init","checkInitializationRequirements","getChainConfig","WalletInitializationError","notInstalled","PhantomInjectedProvider","config","autoConnect","connect","error","log","checkConnectionRequirements","CONNECTING","adapter","handleDisconnect","_handleDisconnect","connectWithProvider","once","windowClosed","args","apply","_this","reason","Web3AuthError","WalletLoginError","connectionError","message","publicKey","on","ERRORED","disconnect","cleanup","notConnectedError","_this$_wallet2","disconnectionError","getUserInfo","injectedProvider","setupProvider","reconnected"],"sources":["../src/utils.ts","../src/phantomAdapter.ts"],"sourcesContent":[null,null]},"metadata":{},"sourceType":"module"}