{"ast":null,"code":"import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, log, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\n\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass OpenloginAdapter extends BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(this, \"openloginInstance\", null);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"openloginOptions\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  get provider() {\n    var _this$privKeyProvider;\n\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    var _this$openloginOption;\n\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n\n    this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {\n      replaceUrlOnRedirect: isRedirectResult\n    });\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    await this.openloginInstance.init();\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.OPENLOGIN\n    }));\n\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await import('@web3auth/solana-provider');\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await import('@web3auth/ethereum-provider');\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n\n    if (!this.openloginInstance.privKey && params) {\n      var _params$extraLoginOpt;\n\n      await this.openloginInstance.login(merge(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n          login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)\n        })\n      }));\n    }\n\n    let finalPrivKey = this.openloginInstance.privKey;\n\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await import('@toruslabs/openlogin-ed25519');\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n\n}\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };","map":{"version":3,"mappings":"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","names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","chainConfig","getChainConfig","loginSettings","relogin","OpenloginAdapter","BaseAdapter","constructor","params","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","_defineProperty","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","debug","defaultOptions","_params$chainConfig","_params$chainConfig2","openloginOptions","_params$chainConfig3","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","invalidParams","chainConfigProxy","provider","privKeyProvider","_","Error","init","options","checkInitializationRequirements","_this$openloginOption","isRedirectResult","REDIRECT","redirectResult","getHashQueryParams","Object","keys","length","_pid","_objectSpread","replaceUrlOnRedirect","openloginInstance","OpenLogin","status","READY","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","connectionError","disconnect","arguments","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected"],"sources":["../src/config.ts","../src/openloginAdapter.ts"],"sourcesContent":[null,null]},"metadata":{},"sourceType":"module"}